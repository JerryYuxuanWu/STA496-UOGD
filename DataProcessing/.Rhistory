onecomp <- lsnmf_random_less_o3_1to3$fit$`1`
reconstruct<-fitted(onecomp)
# Traditional way of computing WRSS = sum of weight * (X - Xhat)^2
wtss_trad_1 <- sum(weight_matrix * (normalized_matrix_less_o3 - mean(normalized_matrix_less_o3))^2)
wrss_trad_1 <- sum(weight_matrix * (normalized_matrix_less_o3 - reconstruct)^2)
variance_explained_trad_1 <- 1 - (wrss_trad_1 / wtss_trad_1)
variance_explained_trad_1
basis_matrix_5c_less_o3 <- basis(onecomp) #W
coef_matrix_5c_less_o3 <- coef(onecomp) #H
variance_explained_trad_factors <- numeric(1)
variance_explained_pkg_factors <- numeric(1)
reconstruction <- matrix(0, nrow = nrow(basis_matrix_5c_less_o3), ncol = ncol(coef_matrix_5c_less_o3))
# Add the i-th factor to the reconstruction
reconstruction <- reconstruction + (basis_matrix_5c_less_o3[, 1, drop=FALSE] %*% coef_matrix_5c_less_o3[1, , drop=FALSE])
# Compute Residual Sum of Squares (RSS)
wrss_temp_trad <- sum(weight_matrix * (normalized_matrix_less_o3 - reconstruction)^2)
wrss_temp_pkg <- sum((weight_matrix * (normalized_matrix_less_o3 - reconstruction))^2/2)
# Compute Variance Explained by adding this factor
variance_explained_trad_factors[1] <- 1 - (wrss_temp_trad / wtss_trad)
variance_explained_pkg_factors[1] <- 1 - (wrss_temp_pkg / wtss_pkg)
# Plot variance explained by each factor cumulatively
tibble(factor = c(1:length(variance_explained_trad_factors),
1:length(variance_explained_pkg_factors)),
var_exp = c(variance_explained_trad_factors, variance_explained_pkg_factors),
method = c(rep('Traditional', length(variance_explained_trad_factors)),
rep('Package', length(variance_explained_pkg_factors)))) %>%
ggplot() +
geom_line(aes(x = factor, y = var_exp, color = method)) +
geom_point(aes(x = factor, y = var_exp, color = method)) +
labs(x = 'Number of factors', y = 'Variance explained (WRSS)') +
theme_bw()
twocomp <- lsnmf_random_less_o3_1to3$fit$`2`
reconstruct<-fitted(twocomp)
# Traditional way of computing WRSS = sum of weight * (X - Xhat)^2
wtss_trad_2 <- sum(weight_matrix * (normalized_matrix_less_o3 - mean(normalized_matrix_less_o3))^2)
wrss_trad_2 <- sum(weight_matrix * (normalized_matrix_less_o3 - reconstruct)^2)
variance_explained_trad_2 <- 1 - (wrss_trad_2 / wtss_trad_2)
variance_explained_trad_2
basis_matrix_5c_less_o3 <- basis(twocomp) #W
coef_matrix_5c_less_o3 <- coef(twocomp) #H
# Incrementally add factors and calculate variance explained
variance_explained_trad_factors <- numeric(2)
variance_explained_pkg_factors <- numeric(2)
reconstruction <- matrix(0, nrow = nrow(basis_matrix_5c_less_o3), ncol = ncol(coef_matrix_5c_less_o3))
for (i in 1:2) {
# Add the i-th factor to the reconstruction
reconstruction <- reconstruction + (basis_matrix_5c_less_o3[, i, drop=FALSE] %*% coef_matrix_5c_less_o3[i, , drop=FALSE])
# Compute Residual Sum of Squares (RSS)
wrss_temp_trad <- sum(weight_matrix * (normalized_matrix_less_o3 - reconstruction)^2)
wrss_temp_pkg <- sum((weight_matrix * (normalized_matrix_less_o3 - reconstruction))^2/2)
# Compute Variance Explained by adding this factor
variance_explained_trad_factors[i] <- 1 - (wrss_temp_trad / wtss_trad)
variance_explained_pkg_factors[i] <- 1 - (wrss_temp_pkg / wtss_pkg)
}
# Plot variance explained by each factor cumulatively
tibble(factor = c(1:length(variance_explained_trad_factors),
1:length(variance_explained_pkg_factors)),
var_exp = c(variance_explained_trad_factors, variance_explained_pkg_factors),
method = c(rep('Traditional', length(variance_explained_trad_factors)),
rep('Package', length(variance_explained_pkg_factors)))) %>%
ggplot() +
geom_line(aes(x = factor, y = var_exp, color = method)) +
geom_point(aes(x = factor, y = var_exp, color = method)) +
labs(x = 'Number of factors', y = 'Variance explained (WRSS)') +
theme_bw()
min(weight)
min(weight_matrix)
wtss_trad
wtss_pkg
wtss_epa <- sum((weight_matrix * (normalized_matrix_less_o3 - mean(normalized_matrix_less_o3)))^2)
wtss_epa
nmf_result_5c_less_o3 <- lsnmf_random_less_o3$fit$`5`
basis_matrix_5c_less_o3 <- basis(nmf_result_5c_less_o3) #W
coef_matrix_5c_less_o3 <- coef(nmf_result_5c_less_o3) #H
# get variance explained by the factors (WRSS)
reconstruct<-fitted(nmf_result_5c_less_o3)
# Traditional way of computing WRSS = sum of weight * (X - Xhat)^2
wtss_trad <- sum(weight_matrix * (normalized_matrix_less_o3 - mean(normalized_matrix_less_o3))^2)
wrss_trad <- sum(weight_matrix * (normalized_matrix_less_o3 - reconstruct)^2)
variance_explained_trad <- 1 - (wrss_trad / wtss_trad)
cat('Variance explained (Traditional WRSS): ', round(variance_explained_trad*100, 2), '%', sep = '')
# How the NMF package computes WRSS = sum of 0.5 * (weight * (X - Xhat))^2
wtss_pkg <- sum((weight_matrix * (normalized_matrix_less_o3 - mean(normalized_matrix_less_o3)))^2)/2
wrss_pkg <- sum((weight_matrix * (normalized_matrix_less_o3 - reconstruct))^2)/2
variance_explained_pkg <- 1 - (wrss_pkg / wtss_pkg)
cat('Variance explained (Package WRSS): ', round(variance_explained_pkg*100, 2), '%', sep = '')
# How EPANMF computes wrss (q_loss or Qtrue) = (weight * (residual))^2
wtss_epa <- sum((weight_matrix * (normalized_matrix_less_o3 - mean(normalized_matrix_less_o3)))^2)
# get variance explained by each factor separately
# Compute variance explained by each factor
# Initialize variance explained tracker
variance_explained_trad_factors <- numeric(5)
variance_explained_pkg_factors <- numeric(5)
# Incrementally add factors and calculate variance explained
reconstruction <- matrix(0, nrow = nrow(basis_matrix_5c_less_o3), ncol = ncol(coef_matrix_5c_less_o3))
for (i in 1:5) {
# Add the i-th factor to the reconstruction
reconstruction <- reconstruction + (basis_matrix_5c_less_o3[, i, drop=FALSE] %*% coef_matrix_5c_less_o3[i, , drop=FALSE])
# Compute Residual Sum of Squares (RSS)
wrss_temp_trad <- sum(weight_matrix * (normalized_matrix_less_o3 - reconstruction)^2)
wrss_temp_pkg <- sum((weight_matrix * (normalized_matrix_less_o3 - reconstruction))^2)/2
# Compute Variance Explained by adding this factor
variance_explained_trad_factors[i] <- 1 - (wrss_temp_trad / wtss_trad)
variance_explained_pkg_factors[i] <- 1 - (wrss_temp_pkg / wtss_pkg)
}
# Plot variance explained by each factor cumulatively
tibble(factor = c(1:length(variance_explained_trad_factors),
1:length(variance_explained_pkg_factors)),
var_exp = c(variance_explained_trad_factors, variance_explained_pkg_factors),
method = c(rep('Traditional', length(variance_explained_trad_factors)),
rep('Package', length(variance_explained_pkg_factors)))) %>%
ggplot() +
geom_line(aes(x = factor, y = var_exp, color = method)) +
geom_point(aes(x = factor, y = var_exp, color = method)) +
labs(x = 'Number of factors', y = 'Variance explained (WRSS)') +
theme_bw()
nmf_result_5c_less_o3 <- lsnmf_random_less_o3$fit$`5`
basis_matrix_5c_less_o3 <- basis(nmf_result_5c_less_o3) #W
coef_matrix_5c_less_o3 <- coef(nmf_result_5c_less_o3) #H
# get variance explained by the factors (WRSS)
reconstruct<-fitted(nmf_result_5c_less_o3)
# Traditional way of computing WRSS = sum of weight * (X - Xhat)^2
wtss_trad <- sum(weight_matrix^2 * (normalized_matrix_less_o3 - mean(normalized_matrix_less_o3))^2)
wrss_trad <- sum(weight_matrix^2 * (normalized_matrix_less_o3 - reconstruct)^2)
variance_explained_trad <- 1 - (wrss_trad / wtss_trad)
cat('Variance explained (Traditional WRSS): ', round(variance_explained_trad*100, 2), '%', sep = '')
# How the NMF package computes WRSS = sum of 0.5 * (weight * (X - Xhat))^2
wtss_pkg <- sum((weight_matrix * (normalized_matrix_less_o3 - mean(normalized_matrix_less_o3)))^2)/2
wrss_pkg <- sum((weight_matrix * (normalized_matrix_less_o3 - reconstruct))^2)/2
variance_explained_pkg <- 1 - (wrss_pkg / wtss_pkg)
cat('Variance explained (Package WRSS): ', round(variance_explained_pkg*100, 2), '%', sep = '')
# How EPANMF computes wrss (q_loss or Qtrue) = (weight * (residual))^2
wtss_epa <- sum((weight_matrix * (normalized_matrix_less_o3 - mean(normalized_matrix_less_o3)))^2)
# get variance explained by each factor separately
# Compute variance explained by each factor
# Initialize variance explained tracker
variance_explained_trad_factors <- numeric(5)
variance_explained_pkg_factors <- numeric(5)
# Incrementally add factors and calculate variance explained
reconstruction <- matrix(0, nrow = nrow(basis_matrix_5c_less_o3), ncol = ncol(coef_matrix_5c_less_o3))
for (i in 1:5) {
# Add the i-th factor to the reconstruction
reconstruction <- reconstruction + (basis_matrix_5c_less_o3[, i, drop=FALSE] %*% coef_matrix_5c_less_o3[i, , drop=FALSE])
# Compute Residual Sum of Squares (RSS)
wrss_temp_trad <- sum(weight_matrix * (normalized_matrix_less_o3 - reconstruction)^2)
wrss_temp_pkg <- sum((weight_matrix * (normalized_matrix_less_o3 - reconstruction))^2)/2
# Compute Variance Explained by adding this factor
variance_explained_trad_factors[i] <- 1 - (wrss_temp_trad / wtss_trad)
variance_explained_pkg_factors[i] <- 1 - (wrss_temp_pkg / wtss_pkg)
}
# Plot variance explained by each factor cumulatively
tibble(factor = c(1:length(variance_explained_trad_factors),
1:length(variance_explained_pkg_factors)),
var_exp = c(variance_explained_trad_factors, variance_explained_pkg_factors),
method = c(rep('Traditional', length(variance_explained_trad_factors)),
rep('Package', length(variance_explained_pkg_factors)))) %>%
ggplot() +
geom_line(aes(x = factor, y = var_exp, color = method)) +
geom_point(aes(x = factor, y = var_exp, color = method)) +
labs(x = 'Number of factors', y = 'Variance explained (WRSS)') +
theme_bw()
variance_explained_trad_factors <- numeric(5)
variance_explained_pkg_factors <- numeric(5)
# Incrementally add factors and calculate variance explained
reconstruction <- matrix(0, nrow = nrow(basis_matrix_5c_less_o3), ncol = ncol(coef_matrix_5c_less_o3))
for (i in 1:5) {
# Add the i-th factor to the reconstruction
reconstruction <- reconstruction + (basis_matrix_5c_less_o3[, i, drop=FALSE] %*% coef_matrix_5c_less_o3[i, , drop=FALSE])
# Compute Residual Sum of Squares (RSS)
wrss_temp_trad <- sum(weight_matrix^2 * (normalized_matrix_less_o3 - reconstruction)^2)
wrss_temp_pkg <- sum((weight_matrix * (normalized_matrix_less_o3 - reconstruction))^2)/2
# Compute Variance Explained by adding this factor
variance_explained_trad_factors[i] <- 1 - (wrss_temp_trad / wtss_trad)
variance_explained_pkg_factors[i] <- 1 - (wrss_temp_pkg / wtss_pkg)
}
# Plot variance explained by each factor cumulatively
tibble(factor = c(1:length(variance_explained_trad_factors),
1:length(variance_explained_pkg_factors)),
var_exp = c(variance_explained_trad_factors, variance_explained_pkg_factors),
method = c(rep('Traditional', length(variance_explained_trad_factors)),
rep('Package', length(variance_explained_pkg_factors)))) %>%
ggplot() +
geom_line(aes(x = factor, y = var_exp, color = method)) +
geom_point(aes(x = factor, y = var_exp, color = method)) +
labs(x = 'Number of factors', y = 'Variance explained (WRSS)') +
theme_bw()
variance_explained_trad_factors
wrss_temp_trad
wrss_temp_pkg
wtss_epa
wtss_pkg
wtss_trad
wrss_trad
nmf_result_5c_less_o3 <- lsnmf_random_less_o3$fit$`5`
basis_matrix_5c_less_o3 <- basis(nmf_result_5c_less_o3) #W
coef_matrix_5c_less_o3 <- coef(nmf_result_5c_less_o3) #H
# get variance explained by the factors (WRSS)
reconstruct<-fitted(nmf_result_5c_less_o3)
# Traditional way of computing WRSS = sum of weight * (X - Xhat)^2
wtss_trad <- sum(weight_matrix^2 * (normalized_matrix_less_o3 - mean(normalized_matrix_less_o3))^2)
wrss_trad <- sum(weight_matrix^2 * (normalized_matrix_less_o3 - reconstruct)^2)
variance_explained_trad <- 1 - (wrss_trad / wtss_trad)
cat('Variance explained (Traditional WRSS): ', round(variance_explained_trad*100, 2), '%', sep = '')
# How the NMF package computes WRSS = sum of 0.5 * (weight * (X - Xhat))^2
# Weight here is sigma not sigma^2
wtss_pkg <- sum((weight_matrix * (normalized_matrix_less_o3 - mean(normalized_matrix_less_o3)))^2)/2
wrss_pkg <- sum((weight_matrix * (normalized_matrix_less_o3 - reconstruct))^2)/2
variance_explained_pkg <- 1 - (wrss_pkg / wtss_pkg)
cat('Variance explained (Package WRSS): ', round(variance_explained_pkg*100, 2), '%', sep = '')
# How EPANMF computes wrss (q_loss or Qtrue) = (weight * (residual))^2
# Same as nmf but without taking half
wtss_epa <- sum((weight_matrix * (normalized_matrix_less_o3 - mean(normalized_matrix_less_o3)))^2)
# get variance explained by each factor separately
# Compute variance explained by each factor
# Initialize variance explained tracker
variance_explained_trad_factors <- numeric(5)
variance_explained_pkg_factors <- numeric(5)
# Incrementally add factors and calculate variance explained
reconstruction <- matrix(0, nrow = nrow(basis_matrix_5c_less_o3), ncol = ncol(coef_matrix_5c_less_o3))
for (i in 1:5) {
# Add the i-th factor to the reconstruction
reconstruction <- reconstruction + (basis_matrix_5c_less_o3[, i, drop=FALSE] %*% coef_matrix_5c_less_o3[i, , drop=FALSE])
# Compute Residual Sum of Squares (RSS)
wrss_temp_trad <- sum(weight_matrix^2 * (normalized_matrix_less_o3 - reconstruction)^2)
wrss_temp_pkg <- sum((weight_matrix * (normalized_matrix_less_o3 - reconstruction))^2)/2
# Compute Variance Explained by adding this factor
variance_explained_trad_factors[i] <- 1 - (wrss_temp_trad / wtss_trad)
variance_explained_pkg_factors[i] <- 1 - (wrss_temp_pkg / wtss_pkg)
}
# Plot variance explained by each factor cumulatively
tibble(factor = c(1:length(variance_explained_trad_factors),
1:length(variance_explained_pkg_factors)),
var_exp = c(variance_explained_trad_factors, variance_explained_pkg_factors),
method = c(rep('Traditional', length(variance_explained_trad_factors)),
rep('Package', length(variance_explained_pkg_factors)))) %>%
ggplot() +
geom_line(aes(x = factor, y = var_exp, color = method)) +
geom_point(aes(x = factor, y = var_exp, color = method)) +
labs(x = 'Number of factors', y = 'Variance explained (WRSS)') +
theme_bw()
wrss_trad
wrss_pkg
# Save uncertainty matrix (entry = sigma = uncertainty)
write_csv(uncertainty_matrix, 'uncertainty_matrix.csv')
write_csv(normalized_matrix_less_o3, 'normalized_matrix_less_o3.csv')
# Save uncertainty matrix (entry = sigma = uncertainty)
write_csv(as_tibble(uncertainty_matrix), 'uncertainty_matrix.csv')
write_csv(as_tibble(normalized_matrix_less_o3), 'normalized_matrix_less_o3.csv')
as_tibble(normalized_matrix_less_o3)
View(normalized_matrix_less_o3)
View(hourly_nona_bgrm_zerorepl_norm)
View(hourly_nona_bgrm_zerorepl)
View(hourly_nona_bgrm)
View(hourly_full_nona)
View(hourly_data)
View(hourly_nona)
View(normalized_matrix_less_o3)
# Save uncertainty matrix (entry = sigma = uncertainty)
write_csv(cbind(as_tibble(uncertainty_matrix), hourly_nona$time_utc), 'uncertainty_matrix.csv')
?as_tibble
colnames(normalized_matrix_less_o3)
# Save uncertainty matrix (entry = sigma = uncertainty)
uncertainty_tibble <- cbind(as_tibble(uncertainty_matrix,
column_name = colnames(normalized_matrix_less_o3)),
hourly_nona$time_utc)
View(uncertainty_tibble)
as_tibble(uncertainty_matrix,
column_name = colnames(normalized_matrix_less_o3))
# Save uncertainty matrix (entry = sigma = uncertainty)
uncertainty_tibble <- as_tibble(uncertainty_matrix) %>%
set_colnames(colnames(normalized_matrix_less_o3)) %>%
bind_cols(hourly_nona$time_utc)
# Save uncertainty matrix (entry = sigma = uncertainty)
uncertainty_tibble <- as_tibble(uncertainty_matrix) %>%
setNames(colnames(normalized_matrix_less_o3)) %>%
bind_cols(hourly_nona$time_utc)
# Save uncertainty matrix (entry = sigma = uncertainty)
uncertainty_tibble <- as_tibble(uncertainty_matrix) %>%
setNames(colnames(normalized_matrix_less_o3)) %>%
bind_cols(tibble(time_utc = hourly_nona$time_utc))
uncertainty_tibble <- as_tibble(uncertainty_matrix) %>%
setNames(colnames(normalized_matrix_less_o3)) %>%
bind_cols(tibble(time_utc = hourly_nona$time_utc))
write_csv(uncertainty_tibble, 'uncertainty_matrix.csv')
uncertainty_tibble <- as_tibble(uncertainty_matrix) %>%
setNames(colnames(normalized_matrix_less_o3)) %>%
bind_cols(tibble(time_utc = hourly_nona$time_utc))
write_csv(uncertainty_tibble, 'uncertainty_matrix.csv')
normalized_matrix_less_o3_tibble <- as_tibble(normalized_matrix_less_o3) %>%
bind_cols(tibble(time_utc = hourly_nona$time_utc))
write_csv(normalized_matrix_less_o3_tibble, 'normalized_matrix_less_o3.csv')
uncertainty_tibble <- as_tibble(uncertainty_matrix) %>%
setNames(colnames(normalized_matrix_less_o3)) %>%
bind_cols(tibble(time_utc = hourly_nona$time_utc))
write_csv(uncertainty_tibble, 'uncertainty_matrix.csv')
normalized_matrix_less_o3_tibble <- as_tibble(normalized_matrix_less_o3) %>%
bind_cols(tibble(time_utc = hourly_nona$time_utc))
write_csv(normalized_matrix_less_o3_tibble, 'normalized_matrix_less_o3.csv')
mean(normalized_matrix_less_o3)
install.packages('dbscan')
library(tidyverse)
library(dbscan)
library(leaflet)
library(leaflet.extras)
library(sf)
library(units)
select <- dplyr::select
pb_flare <- readRDS('../data/pb_vnf/eia-pb-vnf.rds')
View(pb_flare)
result_2016 <- hdbscan(pb_flare %>% select(vnf_lon, vnf_lat), minPts = 5)
result_2016 <- hdbscan(dist(pb_flare %>% select(vnf_lon, vnf_lat)), minPts = 5)
dist <- dist(pb_flare %>% select(vnf_lon, vnf_lat))
?dist
length(pb_flare %>% select(vnf_lon, vnf_lat))
nrow(pb_flare %>% select(vnf_lon, vnf_lat))
353018^2
mat <- as.matrix(pb_flare %>% select(vnf_lon, vnf_lat))
mat
dist <- dist(mat)
write_csv(pb_flare %>% select(vnf_lon, vnf_lat), 'pb_flare_coord.csv')
?hdbscan]
?hdbscan
View(pb_flare)
mutate(year = year(as.Date(date)))_
mat <- as.matrix(pb_flare %>% select(vnf_lon, vnf_lat, date) %>%
mutate(year = year(as.Date(date))))
View(mat)
mat <- as.matrix(pb_flare %>%
mutate(year = year(as.Date(date))) %>%
select(vnf_lon, vnf_lat, year))
write_csv(pb_flare_coord_year, 'pb_flare_coord_year.csv')
pb_flare_coord_year <- pb_flare %>%
mutate(year = year(as.Date(date))) %>%
select(vnf_lon, vnf_lat, year)
write_csv(pb_flare_coord_year, 'pb_flare_coord_year.csv')
mat <- as.matrix(pb_flare_coord_year)
dist <- dist(mat)
result_2016 <- hdbscan(dist, minPts = 5)
# # We want to cluster the flares by year and choosing the best minimum point parameter
pb_flare_proj <- pb_flare %>%
st_as_sf(coords = c('vnf_lon', 'vnf_lat'), remove = F) %>%
st_set_crs(4326) %>%
st_transform("+proj=utm +zone=13 ellps=WGS84") %>%
mutate(V1 = sf::st_coordinates(.)[,1],
V2 = sf::st_coordinates(.)[,2]) %>%
st_drop_geometry()
View(pb_flare_proj)
pb_flare_coord_year <- pb_flare_proj %>%
mutate(year = year(as.Date(date))) %>%
select(vnf_lon, vnf_lat, year)
write_csv(pb_flare_coord_year, 'pb_flare_coord_year.csv')
pb_flare_proj <- pb_flare %>%
st_as_sf(coords = c('vnf_lon', 'vnf_lat'), remove = F) %>%
st_set_crs(4326) %>%
st_transform("+proj=utm +zone=13 ellps=WGS84") %>%
mutate(V1 = sf::st_coordinates(.)[,1],
V2 = sf::st_coordinates(.)[,2]) %>%
st_drop_geometry()
?sf::st_coordinates(.)
sf::st_coordinates(pb_flare)[,1]
sf::st_coordinates(pb_flare %>%
st_as_sf(coords = c('vnf_lon', 'vnf_lat'), remove = F) %>%
st_set_crs(4326))[,1]
pb_flare_coord_year <- pb_flare_proj %>%
mutate(year = year(as.Date(date))) %>%
select(Y = V1, X = V2, year)
write_csv(pb_flare_coord_year, 'pb_flare_coord_year.csv')
pb_flare_coord_year <- pb_flare_proj %>%
mutate(year = year(as.Date(date))) %>%
select(X = V1, Y = V2, year)
write_csv(pb_flare_coord_year, 'pb_flare_coord_year.csv')
nrows(pb_flare)
nrow(pb_flare)
setwd("D:/PhD/Research/New Mexico Flaring/STA496-UOGD/DataProcessing")
flaring_v35 <- readRDS("../data/pb_vnf/viirs_filtered_V35.rds")
View(flaring_v35)
View(flaring_v35)
write_csv(flaring_v35, "flaring_v35.csv")
write_csv(flaring_v35, "../data/pb_vnf/flaring_v35.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(zoo)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(zoo)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(zoo)
library(htmlwidgets)
library(openair)
library(leaflet)
# load in clustered data
flare_v35 <- read_csv('../data/pb_vnf/flaring_v35_clustered.csv')
View(flare_v35)
flare_v35 <- flare_v35 %>%
mutate(noise = ifelse(cluster == -1, 1, 0))
flare_v35 <- flare_v35 %>%
mutate(noise = ifelse(cluster == -1, TRUE, FALSE))
wells_djb <- read_csv('../data/DJB well Well Headers.CSV')
cleaned_wells_djb <- wells_djb %>%
dplyr::select(api = API14, drill_type = `Drill Type`, spud_date = `Spud Date`,
completion_date = `Completion Date`,
first_prod_date = `First Prod Date`,
last_prod_date = `Last Prod Date`,
well_status = `Well Status`,
production_type = `Production Type`,
uog_lon = `Surface Hole Longitude (WGS84)`,
uog_lat = `Surface Hole Latitude (WGS84)`,
Operator.Company.Name = `Operator Company Name`)
site_coords <- tibble(name = c('LUR', 'LLG', 'BRZ', 'ECC', 'BNP'),
lat = c(40.1762235, 40.1607039, 40.0699783, 40.0402277, 39.9814076),
lon = c(-105.0476608, -105.1461437, -105.2202754, -105.0520854, -105.0064873))
# Wells map
map <- leaflet() %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery") %>%
addProviderTiles("CartoDB.PositronOnlyLabels") %>%
addCircleMarkers(data = cleaned_wells_djb, lng=~uog_lon, lat=~uog_lat,
fillOpacity = 0.9, radius = 2, weight = 1, color="cyan") %>%
addCircleMarkers(data = site_coords, lng=~lon, lat=~lat, radius=10,color="yellow",
fillColor = "yellow", fillOpacity = 1,
label = ~name,
labelOptions =
labelOptions(noHide = TRUE, direction = 'bottom', offset = c(0, 8),
style = list(
"color" = "black",
"font-family" = "serif",
"font-size" = "14px"
)))%>%
addScaleBar("bottomright")
saveWidget(map, file="djb_map.html")
map
well_sampler_plot <- leaflet() %>%
addProviderTiles("Esri.WorldImagery") %>%
addProviderTiles("CartoDB.PositronOnlyLabels") %>%
addCircleMarkers(data = flare_v35, lng = ~easting, lat = ~northing,
stroke = T, fillColor = '#FFD700', radius = 2, weight = 1,
group = 'Flares', col='white', fillOpacity = 0.7) %>%
addLegend(colors = c('#FFD700'),
labels = c('Flares'),
position = 'bottomleft') %>%
addLayersControl(
baseGroups = c('None'),
overlayGroups = c('Samplers', 'Wells', '5ZR Monitor', 'Flares'),
options = layersControlOptions(collapsed = FALSE)
)
flare_v35_plot <- leaflet() %>%
addProviderTiles("Esri.WorldImagery") %>%
addProviderTiles("CartoDB.PositronOnlyLabels") %>%
addCircleMarkers(data = flare_v35, lng = ~easting, lat = ~northing,
stroke = T, fillColor = '#FFD700', radius = 2, weight = 1,
group = 'Flares', col='white', fillOpacity = 0.7) %>%
addLegend(colors = c('#FFD700'),
labels = c('Flares'),
position = 'bottomleft') %>%
addLayersControl(
baseGroups = c('None'),
overlayGroups = c('Samplers', 'Wells', '5ZR Monitor', 'Flares'),
options = layersControlOptions(collapsed = FALSE)
)
flare_v35_plot
()
flare_v35 <- flare_v35  %>%
st_as_sf(coords = c('easting', 'northing'), remove = F) %>%
st_set_crs("+proj=utm +zone=13 ellps=WGS84") %>%
st_transform(4326) %>%
mutate(lon = st_coordinates(.)[,1],
lat = st_coordinates(.)[,2]) %>%
st_drop_geometry()
View(flare_v35)
flare_v35_plot <- leaflet() %>%
addProviderTiles("Esri.WorldImagery") %>%
addProviderTiles("CartoDB.PositronOnlyLabels") %>%
addCircleMarkers(data = flare_v35, lng = ~lon, lat = ~lat,
stroke = T, fillColor = '#FFD700', radius = 2, weight = 1,
group = 'Flares', col='white', fillOpacity = 0.7) %>%
addLegend(colors = c('#FFD700'),
labels = c('Flares'),
position = 'bottomleft') %>%
addLayersControl(
baseGroups = c('None'),
overlayGroups = c('Samplers', 'Wells', '5ZR Monitor', 'Flares'),
options = layersControlOptions(collapsed = FALSE)
)
flare_v35_plot
flare_v35_plot <- leaflet() %>%
addProviderTiles("Esri.WorldImagery") %>%
addProviderTiles("CartoDB.PositronOnlyLabels") %>%
addCircleMarkers(data = flare_v35, lng = ~lon, lat = ~lat,
stroke = T, fillColor = ~ case_when(!noise ~ '#FFD700',
TRUE ~ '#B22222'), radius = 2, weight = 1,
group = 'Flares', col='white', fillOpacity = 0.7) %>%
addLegend(colors = c('#FFD700'),
labels = c('Flares'),
position = 'bottomleft')
flare_v35_plot
?case_when
flare_v35_plot <- leaflet() %>%
addProviderTiles("Esri.WorldImagery") %>%
addProviderTiles("CartoDB.PositronOnlyLabels") %>%
addCircleMarkers(data = flare_v35, lng = ~lon, lat = ~lat,
stroke = T, fillColor = ~ case_when(noise == TRUE ~ '#FFD700',
.default = '#B22222'), radius = 2, weight = 1,
group = 'Flares', col='white', fillOpacity = 0.7) %>%
addLegend(colors = c('#FFD700', '#B22222'),
labels = c('Noise', 'Clustered'),
position = 'bottomleft')
flare_v35_plot
saveWidget(flare_v35_plot, file="flare_v35_map.html")
max(flare_v35$cluster)
min(flare_v35$cluster)
min(flare_v35$cluster>0)
