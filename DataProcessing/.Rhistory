ylab("importance") +
xlab("Variable") +
coord_flip() +
theme_minimal()
test_result_data <- tibble(obs = fit.xgb_da_full$pred$obs,
pred = fit.xgb_da_full$pred$pred,
disaster = if_else(fit.xgb_da_full$trainingData[fit.xgb_da_full$pred$rowIndex, ]$year_2021 == 1 &
(fit.xgb_da_full$trainingData[fit.xgb_da_full$pred$rowIndex, ]$month_10 == 1 |
fit.xgb_da_full$trainingData[fit.xgb_da_full$pred$rowIndex, ]$month_11 == 1 |
fit.xgb_da_full$trainingData[fit.xgb_da_full$pred$rowIndex, ]$month_12 == 1), 1, 0))
fold_stat <- fit.xgb_da_full$pred %>% group_by(Resample) %>%
summarise(R2 = R2(pred, obs), RMSE = RMSE(pred, obs))
test_r2 <- mean(fold_stat$R2)
test_rmse <- mean(fold_stat$RMSE)
xgb_everything_obs_vs_pred_plot <- ggplot(test_result_data,
aes(x = pred, y = obs)) +
geom_point(aes(col = factor(disaster)), show.legend = FALSE) +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2", "n"))) +
labs(y = 'Observed', x = 'Predicted',
title = 'Observed vs Predicted for everything XGBoost') +
theme_bw()
xgb_everything_obs_vs_pred_plot_zoom <- ggplot(test_result_data,
aes(x = pred, y = obs)) +
geom_point(aes(col = factor(disaster)), show.legend = FALSE) +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2", "n"))) +
labs(y = 'Observed', x = 'Predicted',
title = 'Zoomed In') +
coord_cartesian(xlim = c(0, 30), ylim = c(0, 30)) +
theme_bw()
validation_result_da <- rbind(validation_result_da,
tibble(Model = 'Everything w.o Disaster Indicator',
'Coef' = summary(lm(test_result_data$obs ~
test_result_data$pred))$coefficients[2, 1],
'R-Sq' = summary(lm(test_result_data$obs ~
test_result_data$pred))$r.squared,
'Disaster RMSE' = RMSE(test_result_data$pred[which(test_result_data$disaster == 1)],
test_result_data$obs[which(test_result_data$disaster == 1)]),
'Normal RMSE' = RMSE(test_result_data$pred[which(test_result_data$disaster == 0)],
test_result_data$obs[which(test_result_data$disaster == 0)])))
train_adj_r2 <- adj_r2(getTrainPerf(fit.xgb_da_full)$TrainRsquared,
nrow(fit.xgb_da_full$trainingData),
fit.xgb_da_full$finalModel$nfeatures)
test_adj_r2 <- adj_r2(test_r2,
nrow(fit.xgb_da_full$trainingData),
fit.xgb_da_full$finalModel$nfeatures)
xgb_result_da <- rbind(xgb_result_da,
tibble(Model = 'Everything w.o Disaster Indicator',
'10CV Train R-Sq' = train_adj_r2,
'10CV Test R-Sq' = test_adj_r2,
'10CV Test RMSE' = test_rmse))
ggarrange(xgb_sincefeb2022_obs_vs_pred_plot,
ggarrange(xgb_disaster_obs_vs_pred_plot, xgb_disaster_obs_vs_pred_plot_zoom,
ncol = 2, labels = c("2", "3")),
ggarrange(xgb_everything_obs_vs_pred_plot, xgb_everything_obs_vs_pred_plot_zoom,
ncol = 2, labels = c("4", "5")),
labels = c("1"),
nrow = 3)
ggarrange(xgb_excl_dis_obs_vs_pred_plot,
ggarrange(xgb_full_dis_ind_obs_vs_pred_plot, xgb_full_dis_ind_obs_vs_pred_plot_zoom,
ncol = 2, labels = c("3", "4")),
labels = c("1"),
nrow = 2)
knitr::kable(validation_result_da, digits = 3)
model_perf_table <- tibble(Model = c('Since Feb 2022',
'Disaster Only',
'Exclude Disaster',
'Everything w. Disaster Indicator',
'Everything w.o Disaster Indicator'),
n = c(nrow(fit.xgb_da$trainingData),
nrow(fit.xgb_da_dis$trainingData),
nrow(fit.xgb_da_excl_dis$trainingData),
nrow(fit.xgb_da_full_dis_ind$trainingData),
nrow(fit.xgb_da_full$trainingData))) %>%
left_join(result_10cv, join_by(Model)) %>%
left_join(xgb_result_da, join_by(Model)) %>%
select(-c('10CV Train R-Sq'))
View(validation_result_da)
fit.xgb_da_log_h2s_sincefeb2022 <- readRDS('../rfiles/xgboost_v2/fit.xgb_da_log_h2s_sincefeb2022.rds')
getTrainPerf(fit.xgb_da_log_h2s_sincefeb2022)
fit.xgb_da_log_h2s_sincefeb2022$finalModel
imp<-varImp(fit.xgb_da_log_h2s_sincefeb2022,scale=FALSE)
# rename variables
imp <- tibble(variable = rownames(imp$importance), importance = imp$importance$Overall) %>%
pivot_wider(names_from = variable,
values_from = importance) %>%
rename(any_of(names)) %>%
pivot_longer(cols = everything(),names_to = 'variable', values_to = 'importance')
imp %>%
top_n(15, importance) %>%
ggplot(aes(x=reorder(variable, importance), y=importance)) +
geom_point() +
geom_segment(aes(x=variable,xend=variable,y=0,yend=importance)) +
ylab("importance") +
xlab("Variable") +
coord_flip() +
theme_minimal()
# Here, we compute the R2 and RMSE for each fold and take the average
fold_stat <- fit.xgb_da_log_h2s_sincefeb2022$pred %>% group_by(Resample) %>%
summarise(R2 = R2(pred, obs), RMSE = RMSE(pred, obs),
R2_BT = R2(exp(pred), exp(obs)), RMSE_BT = RMSE(exp(pred), exp(obs)))
test_r2 <- mean(fold_stat$R2)
test_r2_bt <- mean(fold_stat$R2_BT)
test_rmse <- mean(fold_stat$RMSE)
test_rmse_bt <- mean(fold_stat$RMSE_BT)
log_h2s_xgb_sincefeb2022_obs_vs_pred_plot <- ggplot(tibble(obs = exp(fit.xgb_da_log_h2s_sincefeb2022$pred$obs),
pred = exp(fit.xgb_da_log_h2s_sincefeb2022$pred$pred)),
aes(x = pred, y = obs)) +
geom_abline(slope = 1, intercept = 0, linetype = 'dashed') +                                                         geom_point() +
labs(y = 'Observed', x = 'Predicted',
title = 'Since Februrary 2022') +
stat_poly_line() +
stat_poly_eq(use_label(c("eq")), label.x = "right", label.y = 0.05) +                                                stat_poly_eq(use_label(c("R2")), label.x = "right", label.y = 0.1) +                                                 stat_poly_eq(use_label(c("n")), label.x = "right", label.y = 0.15) +
theme_bw()
validation_result_da <- rbind(validation_result_da,
tibble(Model = 'Since Feb 2022 Log Transform',
'Coef' = summary(lm(fit.xgb_da_log_h2s_sincefeb2022$pred$obs ~
fit.xgb_da_log_h2s_sincefeb2022$pred$pred))$coefficients[2, 1],
'R-Sq' = summary(lm(fit.xgb_da_log_h2s_sincefeb2022$pred$obs ~
fit.xgb_da_log_h2s_sincefeb2022$pred$pred))$r.squared))
validation_result_dm <- tibble(Model = character(),
'Coef' = character(),
'R-Sq' = numeric(),
'Disaster RMSE' = numeric(),
'Normal RMSE' = numeric())
xgb_result_dm <- tibble(Model = character(),
'10CV Train R-Sq' = numeric(),
'10CV Test R-Sq' = numeric(),
'10CV Test RMSE' = numeric())
fit.xgb_dm <- readRDS('../rfiles/xgboost_v2/fit.xgb_dm.rds')
getTrainPerf(fit.xgb_dm)
fit.xgb_dm$finalModel
names <- c("Longitude" = "mon_utm_x",
"Latitude" = "mon_utm_y",
"Distance to Refinery" = "dist_ref",
"Angle to Refinery" = "angle_ref",
"Active Wells within 2km" = "active_2km",
"Inactive Wells within 2km" = "inactive_2km",
"Monthly Oil Production 2km" = "monthly_oil_2km",
"Monthly Gas Production 2km" = "monthly_gas_2km",
"Distance to WRP" = "dist_wrp",
"WRP Capacity" = "closest_wrp_capacity",
"Angle to WRP" = "angle_wrp",
"Distance to Dominguez Channel" = "dist_dc",
"Average Daily Temperature" = "daily_temp",
"Average Daily Humidity" = "daily_hum",
"Daily Precipitation" = "daily_precip",
"Average Daily Wind Speed" = "ws_avg",
"Average Daily Wind Direction" = "wd_avg",
"Downwind Refinery" = "daily_downwind_ref",
"Downwind WRP" = "daily_downwind_wrp",
"Elevation" = "elevation",
"Enhanced Vegetation Index" = "EVI",
"Number of Daily Odor Complaints" = "num_odor_complaints",
"2020" = "year_2020",
"2021" = "year_2021",
"2022" = "year_2022",
"2023" = "year_2023",
"January" = "month_01",
"February" = "month_02",
"March" = "month_03",
"April" = "month_04",
"May" = "month_05",
"June" = "month_06",
"July" = "month_07",
"August" = "month_08",
"September" = "month_09",
"October" = "month_10",
"November" = "month_11",
"December" = "month_12",
"Monday" = "weekday_Mon",
"Tuesday" = "weekday_Tue",
"Wednesday" = "weekday_Wed",
"Thursday" = "weekday_Thu",
"Friday" = "weekday_Fri",
"Saturday" = "weekday_Sat",
"Sunday" = "weekday_Sun",
"Disaster" = "disaster")
imp<-varImp(fit.xgb_dm,scale=FALSE)
# rename variables
imp <- tibble(variable = rownames(imp$importance), importance = imp$importance$Overall) %>%
pivot_wider(names_from = variable,
values_from = importance) %>%
rename(any_of(names)) %>%
pivot_longer(cols = everything(),names_to = 'variable', values_to = 'importance')
imp %>%
top_n(15, importance) %>%
ggplot(aes(x=reorder(variable, importance), y=importance)) +
geom_point() +
geom_segment(aes(x=variable,xend=variable,y=0,yend=importance)) +
ylab("importance") +
xlab("Variable") +
coord_flip() +
theme_minimal()
# we use savePredictions = 'final' to store the predictions on the test set at each fold
# Here, we compute the R2 and RMSE for each fold and take the average
fold_stat <- fit.xgb_dm$pred %>% group_by(Resample) %>%
summarise(R2 = R2(pred, obs), RMSE = RMSE(pred, obs))
test_r2 <- mean(fold_stat$R2)
test_rmse <- mean(fold_stat$RMSE)
xgb_sincefeb2022_obs_vs_pred_plot <- ggplot(tibble(obs = fit.xgb_dm$pred$obs, pred = fit.xgb_dm$pred$pred),
aes(x = pred, y = obs)) +
geom_point() +
labs(y = 'Observed', x = 'Predicted',
title = 'Observed vs Predicted for Since 2022 XGBoost') +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2", "n"))) +
theme_bw()
validation_result_dm <- rbind(validation_result_dm,
tibble(Model = 'Since Feb 2022',
'Coef' = summary(lm(fit.xgb_dm$pred$obs ~
fit.xgb_dm$pred$pred))$coefficients[2, 1],
'R-Sq' = summary(lm(fit.xgb_dm$pred$obs ~
fit.xgb_dm$pred$pred))$r.squared,
'Disaster RMSE' = NA,
'Normal RMSE' = NA))
train_adj_r2 <- adj_r2(getTrainPerf(fit.xgb_dm)$TrainRsquared,
nrow(fit.xgb_dm$trainingData),
fit.xgb_dm$finalModel$nfeatures)
test_adj_r2 <- adj_r2(test_r2,
nrow(fit.xgb_dm$trainingData),
fit.xgb_dm$finalModel$nfeatures)
xgb_result_dm <- rbind(xgb_result_dm,
tibble(Model = 'Since Feb 2022',
'10CV Train R-Sq' = train_adj_r2,
'10CV Test R-Sq' = test_adj_r2,
'10CV Test RMSE' = test_rmse))
fit.xgb_dm_dis <- readRDS('../rfiles/xgboost_v2/fit.xgb_dm_dis.rds')
getTrainPerf(fit.xgb_dm_dis)
fit.xgb_dm_dis$finalModel
imp<-varImp(fit.xgb_dm_dis,scale=FALSE)
# rename variables
imp <- tibble(variable = rownames(imp$importance), importance = imp$importance$Overall) %>%
pivot_wider(names_from = variable,
values_from = importance) %>%
rename(any_of(names)) %>%
pivot_longer(cols = everything(),names_to = 'variable', values_to = 'importance')
imp %>%
top_n(15, importance) %>%
ggplot(aes(x=reorder(variable, importance), y=importance)) +
geom_point() +
geom_segment(aes(x=variable,xend=variable,y=0,yend=importance)) +
ylab("importance") +
xlab("Variable") +
coord_flip() +
theme_minimal()
test_r2 <- fold_stat <- fit.xgb_dm_dis$pred %>% group_by(Resample) %>%
summarise(R2 = R2(pred, obs), RMSE = RMSE(pred, obs))
test_r2 <- mean(fold_stat$R2)
test_rmse <- mean(fold_stat$RMSE)
xgb_disaster_obs_vs_pred_plot <- ggplot(tibble(obs = fit.xgb_dm_dis$pred$obs, pred = fit.xgb_dm_dis$pred$pred),
aes(x = pred, y = obs)) +
geom_point() +
# geom_abline(intercept = 0, slope = 1, color = 'red') +
# geom_smooth(method = 'lm', formula = y ~ x, geom = 'smooth') +
labs(y = 'Observed', x = 'Predicted',
title = 'Observed vs Predicted for Disaster Only XGBoost') +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2", "n"))) +
theme_bw()
xgb_disaster_obs_vs_pred_plot_zoom <- ggplot(tibble(obs = fit.xgb_dm_dis$pred$obs, pred = fit.xgb_dm_dis$pred$pred),
aes(x = pred, y = obs)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = 'red') +
geom_smooth(method = 'lm', formula = y ~ x, geom = 'smooth') +
labs(y = 'Observed', x = 'Predicted',
title = 'Zoomed In') +
coord_cartesian(xlim = c(0, 50), ylim = c(0, 50)) +
theme_bw()
validation_result_dm <- rbind(validation_result_dm,
tibble(Model = 'Disaster Only',
'Coef' = summary(lm(fit.xgb_dm_dis$pred$obs ~
fit.xgb_dm_dis$pred$pred))$coefficients[2, 1],
'R-Sq' = summary(lm(fit.xgb_dm_dis$pred$obs ~
fit.xgb_dm_dis$pred$pred))$r.squared,
'Disaster RMSE' = NA,
'Normal RMSE' = NA))
train_adj_r2 <- adj_r2(getTrainPerf(fit.xgb_dm_dis)$TrainRsquared,
nrow(fit.xgb_dm_dis$trainingData),
fit.xgb_dm_dis$finalModel$nfeatures)
test_adj_r2 <- adj_r2(test_r2,
nrow(fit.xgb_dm_dis$trainingData),
fit.xgb_dm_dis$finalModel$nfeatures)
xgb_result_dm <- rbind(xgb_result_dm,
tibble(Model = 'Disaster Only',
'10CV Train R-Sq' = train_adj_r2,
'10CV Test R-Sq' = test_adj_r2,
'10CV Test RMSE' = test_rmse))
fit.xgb_dm_excl_dis<- readRDS('../rfiles/xgboost_v2/fit.xgb_dm_excl_dis.rds')
getTrainPerf(fit.xgb_dm_excl_dis)
fit.xgb_dm_excl_dis$finalModel
imp<-varImp(fit.xgb_dm_excl_dis,scale=FALSE)
# rename variables
imp <- tibble(variable = rownames(imp$importance), importance = imp$importance$Overall) %>%
pivot_wider(names_from = variable,
values_from = importance) %>%
rename(any_of(names)) %>%
pivot_longer(cols = everything(),names_to = 'variable', values_to = 'importance')
imp %>%
top_n(15, importance) %>%
ggplot(aes(x=reorder(variable, importance), y=importance)) +
geom_point() +
geom_segment(aes(x=variable,xend=variable,y=0,yend=importance)) +
ylab("importance") +
xlab("Variable") +
coord_flip() +
theme_minimal()
fold_stat <- fit.xgb_dm_excl_dis$pred %>% group_by(Resample) %>%
summarise(R2 = R2(pred, obs), RMSE = RMSE(pred, obs))
test_r2 <- mean(fold_stat$R2)
test_rmse <- mean(fold_stat$RMSE)
xgb_excl_dis_obs_vs_pred_plot <- ggplot(tibble(obs = fit.xgb_dm_excl_dis$pred$obs,
pred = fit.xgb_dm_excl_dis$pred$pred),
aes(x = pred, y = obs)) +
geom_point() +
labs(y = 'Observed', x = 'Predicted',
title = 'Observed vs Predicted for exclude disaster XGBoost') +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2", "n"))) +
theme_bw()
xgb_excl_dis_obs_vs_pred_plot
validation_result_dm <- rbind(validation_result_dm,
tibble(Model = 'Exclude Disaster',
'Coef' = summary(lm(fit.xgb_dm_excl_dis$pred$obs ~
fit.xgb_dm_excl_dis$pred$pred))$coefficients[2, 1],
'R-Sq' = summary(lm(fit.xgb_dm_excl_dis$pred$obs ~
fit.xgb_dm_excl_dis$pred$pred))$r.squared,
'Disaster RMSE' = NA,
'Normal RMSE' = NA))
train_adj_r2 <- adj_r2(getTrainPerf(fit.xgb_dm_excl_dis)$TrainRsquared,
nrow(fit.xgb_dm_excl_dis$trainingData),
fit.xgb_dm_excl_dis$finalModel$nfeatures)
test_adj_r2 <- adj_r2(test_r2,
nrow(fit.xgb_dm_excl_dis$trainingData),
fit.xgb_dm_excl_dis$finalModel$nfeatures)
xgb_result_dm <- rbind(xgb_result_dm,
tibble(Model = 'Exclude Disaster',
'10CV Train R-Sq' = train_adj_r2,
'10CV Test R-Sq' = test_adj_r2,
'10CV Test RMSE' = test_rmse))
fit.xgb_dm_full_dis_ind <- readRDS('../rfiles/xgboost_v2/fit.xgb_dm_full_dis_ind.rds')
getTrainPerf(fit.xgb_dm_full_dis_ind)
fit.xgb_dm_full_dis_ind$finalModel
imp<-varImp(fit.xgb_dm_full_dis_ind,scale=FALSE)
# rename variables
imp <- tibble(variable = rownames(imp$importance), importance = imp$importance$Overall) %>%
pivot_wider(names_from = variable,
values_from = importance) %>%
rename(any_of(names)) %>%
pivot_longer(cols = everything(),names_to = 'variable', values_to = 'importance')
imp %>%
top_n(15, importance) %>%
ggplot(aes(x=reorder(variable, importance), y=importance)) +
geom_point() +
geom_segment(aes(x=variable,xend=variable,y=0,yend=importance)) +
ylab("importance") +
xlab("Variable") +
coord_flip() +
theme_minimal()
test_result_data <- tibble(obs = fit.xgb_dm_full_dis_ind$pred$obs,
pred = fit.xgb_dm_full_dis_ind$pred$pred,
disaster = fit.xgb_dm_full_dis_ind$trainingData$disaster[fit.xgb_dm_full_dis_ind$pred$rowIndex])
fold_stat <- fit.xgb_dm_full_dis_ind$pred %>% group_by(Resample) %>%
summarise(R2 = R2(pred, obs), RMSE = RMSE(pred, obs))
test_r2 <- mean(fold_stat$R2)
test_rmse <- mean(fold_stat$RMSE)
xgb_full_dis_ind_obs_vs_pred_plot <- ggplot(tibble(obs = test_result_data$obs,
pred = test_result_data$pred,
disaster = test_result_data$disaster),
aes(x = pred, y = obs)) +
geom_point(aes(col = factor(disaster)), show.legend = FALSE) +
labs(y = 'Observed', x = 'Predicted',
title = 'Observed vs Predicted for everything with disaster indicator XGBoost') +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2", "n"))) +
theme_bw()
xgb_full_dis_ind_obs_vs_pred_plot_zoom <- ggplot(tibble(obs = test_result_data$obs,
pred = test_result_data$pred,
disaster = test_result_data$disaster),
aes(x = pred, y = obs)) +
geom_point(aes(col = factor(disaster)), show.legend = FALSE) +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2", "n"))) +
labs(y = 'Observed', x = 'Predicted',
title = 'Zoomed In') +
coord_cartesian(xlim = c(0, 30), ylim = c(0, 30)) +
theme_bw()
validation_result_dm <- rbind(validation_result,
tibble(Model = 'Everything w. Disaster Indicator',
'Coef' = summary(lm(fit.xgb_dm_full_dis_ind$pred$obs ~
fit.xgb_dm_full_dis_ind$pred$pred))$coefficients[2, 1],
'R-Sq' = summary(lm(fit.xgb_dm_full_dis_ind$pred$obs ~
fit.xgb_dm_full_dis_ind$pred$pred))$r.squared,
'Disaster RMSE' = RMSE(test_result_data$pred[which(test_result_data$disaster == 1)],
test_result_data$obs[which(test_result_data$disaster == 1)]),
'Normal RMSE' = RMSE(test_result_data$pred[which(test_result_data$disaster == 0)],
test_result_data$obs[which(test_result_data$disaster == 0)])))
View(validation_result_dm)
fit.xgb_da_log_h2s_dis <- readRDS('../rfiles/xgboost_v2/fit.xgb_da_log_h2s_dis.rds')
getTrainPerf(fit.xgb_da_log_h2s_dis)
getTrainPerf(fit.xgb_da_log_h2s_excl_dis)
fit.xgb_da_log_h2s_excl_dis <- readRDS('../rfiles/xgboost_v2/fit.xgb_da_log_h2s_excl_dis.rds')
getTrainPerf(fit.xgb_da_log_h2s_excl_dis)
fit.xgb_da_log_h2s_dis_ind <- readRDS('../rfiles/xgboost_v2/fit.xgb_da_log_h2s_dis_ind.rds')
getTrainPerf(fit.xgb_da_log_h2s_dis_ind)
fit.xgb_da_log_h2s_full <- readRDS('../rfiles/xgboost_v2/fit.xgb_da_log_h2s_full.rds')
getTrainPerf(fit.xgb_da_log_h2s_full)
install.packages('leaps')
?regsubset
?regsubsets
library(leaps)
?regsubsets
View(final_model_features_table)
View(model_features_table)
model_features_table[1,features]
model_features_table[1,]
model_features_table[1,'features']
model_features_table[2,'features']
model_features_table[9,'features']
model_features_table[17,'features']
model_features_table[25,'features']
model_features_table[26,'features']
# full with disaster indicator
predictors_dis_ind <-
c("s(as.numeric(month),bs='cc')", 'year', 'weekday', 'wd_avg', 'ws_avg',
'daily_downwind_ref', 'I(1/dist_wrp^2)', 'I(1/dist_ref^2)',
"s(I(mon_utm_x/10^3), I(mon_utm_y/10^3), bs='tp', k = 10)",
"te(I(mon_utm_x/10^3), I(mon_utm_y/10^3), as.numeric(day), k=c(10,10),d=c(2,1),bs=c('tp','cc'))",
'monthly_oil_2km', 'monthly_gas_2km', 'active_2km', 'inactive_2km',
'daily_downwind_wrp', 'elevation', 'EVI', 'num_odor_complaints', 'I(1/dist_dc^2)',
'closest_wrp_capacity', 'daily_temp', 'daily_hum', 'daily_precip', 'disaster')
data_dis_ind <- daily_full %>%
mutate(disaster =
if_else(year == '2021', month %in% c('10', '11', '12'), 1, 0))
# Disaster indicator
h2s_da_model_dis_ind <- get_gam_model('H2S_daily_avg', 'da',
'dis_ind',
data_dis)
# Disaster indicator
h2s_da_model_dis_ind <- get_gam_model('H2S_daily_avg', 'da',
'dis_ind',
data_dis_ind)
summary(h2s_da_model_dis_ind)
log_h2s_da_model_dis_ind <- get_gam_model('log(H2S_daily_avg)', 'log_da',
'dis_ind',
data_dis_ind)
log_h2s_da_model_dis_ind <- get_gam_model('log(H2S_daily_avg)', 'log_da',
'dis_ind',
data_dis_ind)
summary(log_h2s_da_model_dis_ind)
library(tidyverse)
library(mgcv)
library(mgcViz)
library(caret)
library(xgboost)
library(fastDummies)
library(circular)
library(raster)
library(terra)
library(sf)
library(evgam)
library(ggpubr)
library(ggpmisc)
select <- dplyr::select
daily_full <- readRDS('../data/daily_full_20230930.rds')
daily_full <- daily_full %>%
filter(!is.na(H2S_daily_avg))
smooth_compare <- tibble(response = responses) %>%
cross_join(tibble(daterange = daterange))
responses <- c('H2S_daily_avg', 'log(H2S_daily_avg)', 'H2S_daily_max', 'log(H2S_daily_max)')
daterange <- c('sincefeb2022', 'dis', 'excl_dis', 'dis_ind', 'full')
smooth <- c("s(as.numeric(month),bs='cc')",
"s(I(mon_utm_x/10^3), I(mon_utm_y/10^3), bs='tp', k = 10)",
"te(I(mon_utm_x/10^3), I(mon_utm_y/10^3), as.numeric(day), k=c(10,10),d=c(2,1),bs=c('tp','cc'))")
smooth_compare <- tibble(response = responses) %>%
cross_join(tibble(daterange = daterange))
View(smooth_compare)
expand.grid(smooth)
expand.grid(smooth, smooth)
smooth_compare <- crossing(response = responses, daterange = daterange)
View(smooth_compare)
crossing(a = c('1', '2', '3'))
features <- crossing("s(as.numeric(month),bs='cc')",
"s(I(mon_utm_x/10^3), I(mon_utm_y/10^3), bs='tp', k = 10)"
"te(I(mon_utm_x/10^3), I(mon_utm_y/10^3), as.numeric(day), k=c(10,10),d=c(2,1),bs=c('tp','cc'))")
features <- crossing("s(as.numeric(month),bs='cc')",
"s(I(mon_utm_x/10^3), I(mon_utm_y/10^3), bs='tp', k = 10)",
"te(I(mon_utm_x/10^3), I(mon_utm_y/10^3), as.numeric(day), k=c(10,10),d=c(2,1),bs=c('tp','cc'))")
View(features)
smooth_tibble <- tibble(features = list(c(smooth[1], c(smooth[2]))))
View(smooth_tibble)
smooth_tibble <- tibble(features = c(list(c(smooth[1], c(smooth[2])))))
smooth_compare <- crossing(response = responses, daterange = daterange)
smooth_tibble <- tibble(features = c(list(c(smooth[1])), list(c(smooth[2]))))
smooth_tibble <- tibble(features = c(list(c(smooth[1])),
list(c(smooth[2])),
list(c(smooth[3])),
list(c(smooth[1:2])),
list(c(smooth[c(1, 3)])),
list(c(smooth[2:3])),
list(c(smooth[1:3]))),
disaster_applicable = c(0, 1, 1, 0, 0, 1, ))
smooth_tibble <- tibble(features = c(list(c(smooth[1])),
list(c(smooth[2])),
list(c(smooth[3])),
list(c(smooth[1:2])),
list(c(smooth[c(1, 3)])),
list(c(smooth[2:3])),
list(c(smooth[1:3]))),
disaster_applicable = c(0, 1, 1, 0, 0, 1, 0))
View(smooth_tibble)
