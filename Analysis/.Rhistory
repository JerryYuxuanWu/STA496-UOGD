names(co_10)
# Create time series plot with GAM smooth line and horizontal line
co_10<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_co_finalized_10min.csv", skip=1)
colnames(co_10)<-c("time_utc", "co")
# Create time series plot with GAM smooth line and horizontal line
co_10<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_co_finalized_10min.csv", skip=1)
colnames(co_10)<-c("time_utc", "co")
co_10$datetime_utc <- as.POSIXct(co_10$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
co_10$datetime_mountain <- with_tz(co_10$datetime_utc, tzone = "America/Denver")
co_10<-merged[co_10$datetime_mountain>="2023-05-01 00:00:00 MDT",]
ggplot(co_10, aes(x = datetime_mountain, y = co)) +
geom_line(alpha = 0.6, color = "black", size=0.1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cr", k=30), color = "orange", se = FALSE) +
#geom_hline(yintercept = 1.9, linetype = "dashed", color = "blue") +
#scale_y_log10() +
scale_y_continuous(limits=c(0,1600),breaks = seq(0, 1600, by = 100)) +
labs(x = "", y = "CO, ppb") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
View(co_10)
View(co_10)
# Create time series plot with GAM smooth line and horizontal line
co_10<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_co_finalized_10min.csv", skip=1)
colnames(co_10)<-c("time_utc", "co")
co_10$datetime_utc <- as.POSIXct(co_10$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
co_10$datetime_mountain <- with_tz(co_10$datetime_utc, tzone = "America/Denver")
co_10<-co_10[co_10$datetime_mountain>="2023-05-01 00:00:00 MDT",]
ggplot(co_10, aes(x = datetime_mountain, y = co)) +
geom_line(alpha = 0.6, color = "black", size=0.1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cr", k=30), color = "orange", se = FALSE) +
#geom_hline(yintercept = 1.9, linetype = "dashed", color = "blue") +
#scale_y_log10() +
scale_y_continuous(limits=c(0,1600),breaks = seq(0, 1600, by = 100)) +
labs(x = "", y = "CO, ppb") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
ggplot(co_10, aes(x = datetime_mountain, y = co)) +
geom_line(alpha = 0.6, color = "black", size=0.1) +
#geom_smooth(method = "gam", formula = y ~ s(x, bs = "cr", k=30), color = "orange", se = FALSE) +
#geom_hline(yintercept = 1.9, linetype = "dashed", color = "blue") +
#scale_y_log10() +
scale_y_continuous(limits=c(0,1600),breaks = seq(0, 1600, by = 100)) +
labs(x = "", y = "CO, ppb") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
voc<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/VOC sampling window data/Boulder_AIR_LNM_voc_finalized.csv")
View(voc)
names(voc)
voc<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/VOC sampling window data/Boulder_AIR_LNM_voc_finalized.csv", skip=1)
colnames(voc)<-c(  "time_utc",       "ethane" ,        "ethene"  ,       "propane" ,       "propene" ,       "X1_3.butadiene",
"i.butane",       "n.butane" ,      "acetylene",      "cyclopentane" ,  "i.pentane",      "n.pentane" ,
"n.hexane",       "isoprene" ,      "n.heptane" ,     "benzene" ,       "n.octane" ,      "toluene",
"ethyl.benzene",  "m.p.xylene"  ,   "o.xylene")
ggplot(merged, aes(x = as.factor(hour), y = ch4/1000)) +
scale_y_log10() +
geom_boxplot(fill = "lightgrey", color = "black", outlier.shape = 1, size = 0.3) +  # Open circles for outliers
labs(title = "", x = "Hour of Day", y = "Methane, ppm") +
theme_minimal()
methane<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_ch4_finalized_1min.csv", skip=1)
colnames(methane)<-c("time_utc", "ch4","co2")
methane$datetime_utc <- as.POSIXct(methane$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
o3<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_o3_finalized_1min.csv", skip=1)
colnames(o3)<-c("time_utc", "o3")
o3$datetime_utc <- as.POSIXct(o3$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
co<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_co_finalized_1min.csv",skip=1)
colnames(co)<-c("time_utc", "co")
co$datetime_utc <- as.POSIXct(co$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
nox<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_nox_finalized_1min.csv", skip=1)
colnames(nox)<-c("time_utc", "nox", "no", "no2")
nox$datetime_utc <- as.POSIXct(nox$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
met<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_met_finalized_1min_w_wvmx.csv", skip=1)
colnames(met)<-c("time_utc" ,  "wdr_deg",  "wsp_ms", "temp_f"  , "relh_percent" , "solr",    "pressure_altcorr", "rain" , "water_vapor_mr" )
met$datetime_utc <- as.POSIXct(met$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
# merge
dfs <- list(methane,co, o3, nox, met)
merged <- Reduce(function(x, y) full_join(x, y, by = "datetime_utc"), dfs)
merged$datetime_mountain <- with_tz(merged$datetime_utc, tzone = "America/Denver")
merged<-merged[merged$datetime_mountain>="2023-05-01 00:00:00 MDT",]
# Extract hour of day
merged <- merged %>%
mutate(hour = format(datetime_mountain, "%H"))
ggplot(merged, aes(x = as.factor(hour), y = ch4/1000)) +
scale_y_log10() +
geom_boxplot(fill = "lightgrey", color = "black", outlier.shape = 1, size = 0.3) +  # Open circles for outliers
labs(title = "", x = "Hour of Day", y = "Methane, ppm") +
theme_minimal()
ggplot(data_long, aes(x = factor(time_utc), y = Value, color = Series)) +
geom_line(alpha = 0.6) +
labs(x = "Time", y = "Sound Level, dB", color = "Weighted Noise") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%b %d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# Create an index to avoid large gaps
data_long <- data_long %>%
arrange(time_utc) %>%
mutate(index = row_number())  # Assign a sequential index
# Plot without large gaps
ggplot(data_long, aes(x = index, y = Value, color = Series)) +
geom_line(alpha = 0.6) +
labs(x = "Time", y = "Sound Level, dB", color = "Weighted Noise") +
theme_minimal() +
scale_x_continuous(
breaks = seq(1, nrow(data_long), length.out = 10),
labels = format(data_long$time_utc, "%b %d")[seq(1, nrow(data_long), length.out = 10)]
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# Plot without large gaps
ggplot(data_long, aes(x = index, y = Value, color = Series)) +
geom_line(alpha = 0.6) +
labs(x = "Time", y = "Sound Level, dB", color = "Weighted Noise") +
theme_minimal() +
scale_x_continuous(
breaks = seq(1, nrow(data_long), length.out = 10),
labels = format(data_long$time_utc, "%b %d")[seq(1, nrow(data_long), length.out = 10)]
) +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# Plot without large gaps
ggplot(data_long, aes(x = index, y = Value, color = Series)) +
geom_line(alpha = 0.6) +
labs(x = "Time", y = "Sound Level, dB", color = "Weighted Noise") +
theme_minimal() +
scale_x_continuous(
breaks = seq(1, nrow(data_long), length.out = 10),
labels = format(data_long$time_utc, "%m-%Y")[seq(1, nrow(data_long), length.out = 10)]
) +
#scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
tib <- rnorm(90000 * 2, ncol = 2)
tib <- matrix(rnorm(90000 * 2), ncol = 2)
dist(tib)
gc()
library(geosphere)
library(sf)
library(tools)
library(tidyverse)
wells_clean <- readRDS("../data/wells/cleaned_wells_cb.rds")
wells_prod <- readRDS("../data/wells/cb_wells_prod.rds")
# Location of trailer
# kmz <- file_path_as_absolute("../data/Passive sampler network Permian 3.kmz")
#
# kmz <- st_read(unzip(kmz))
# filter distance
loving_lonlat <- c(-104.1096 , 32.297770)
distance_km_lov <- function(long, lati){
start <- c(long, lati)
distGeo(start, loving_lonlat) / 1000
}
wells_prod <- wells_prod %>% select(-c("drill_type", "spud_date", "completion_date", "first_prod_date", "last_prod_date", "Operator.Company.Name"))%>%
mutate(distToLovi = mapply(distance_km_lov, uog_lon, uog_lat))
# filter distance
wells_prod <- wells_prod %>% filter(distToLovi <= 10) %>% select(-c("uog_lon", "uog_lat", "well_status_p", "well_status", "prod_type_p", "production_type"))
wells_prod_0301 <- wells_prod %>% filter(prod_date >= "2023-01-01")
# replace NA with 0
wells_prod_0301$monthly_oil[is.na(wells_prod_0301$monthly_oil)] <- 0
wells_prod_0301$monthly_gas[is.na(wells_prod_0301$monthly_gas)] <- 0
# Group by date and dist
wells_prod_0301 <- wells_prod_0301 %>% group_by(prod_date, distToLovi) %>%
summarize(monthly_oil = sum(monthly_oil),
monthly_gas = sum(monthly_gas))
library(tidyverse)
# Read all the related RDS first
flaring <- readRDS('FlaringProcessed.rds')
Trailer <- readRDS('TrailerProcessed-20240601.rds')
Weather <- readRDS('WeatherProcessed.rds')
Wells <- readRDS('WellsProcessed20240601.rds')
# Remove Trailer entries where radon_pci or rd_particle_pci is NA
# Trailer <- Trailer[!is.na(Trailer$radon_pCi) & !is.na(Trailer$rd_particle_pCi), ]
# add a daily date and a monthly date
Trailer <- Trailer %>% mutate(day = format(as.POSIXct(time_utc), '%Y-%m-%d'))
Trailer <- Trailer %>% mutate(yearmonth = format(as.POSIXct(time_utc), '%Y-%m'))
# create a trailer_daily
my_mean <- function(x){
mean(x, na.rm=TRUE)
}
Trailer_daily <- Trailer %>% group_by(day) %>%
summarize_at(vars(-c(time_utc, hour, yearmonth)), list(mean = my_mean))
# add a month variable for that
Trailer_daily <- Trailer_daily %>% mutate(yearmonth = format(as.POSIXct(day), '%Y-%m'))
# add an inverse distance for flaring
flaring$inv_dist <- ifelse(1 / flaring$distToLovi < 0.01, 0, 1 / flaring$distToLovi)
# summarize a daily count flaring
flaring_daily <- flaring %>%
# weighted_count = sum of inv_distance
filter(distToLovi <= 100) %>%
group_by(date) %>%
summarise(temp_bb = mean(temp_bb),
closest.flare = min(distToLovi),
distToLovi_mean = mean(distToLovi, na.rm=T),
inv_dist = mean(inv_dist),
weighted.count = sum(inv_dist) * 100,
rhi = mean(rhi),
esf_bb = mean(esf_bb),
n_flare_100 = n(),
n_flare_30 = coalesce(sum(distToLovi <= 30), 0),
n_flare_20 = coalesce(sum(distToLovi <= 20), 0),
n_flare_10 = coalesce(sum(distToLovi <= 10), 0),
n_flare_5 = coalesce(sum(distToLovi <= 5), 0)) %>%
rename(distToLovi = distToLovi_mean)
# summarize a monthly count production
wells_monthly <- Wells %>% group_by(substr(prod_date, 1, 7)) %>%
summarize(distToLovi_wells = mean(distToLovi),
monthly_oil = sum(monthly_oil),
monthly_gas = sum(monthly_gas)) %>%
rename(Month = `substr(prod_date, 1, 7)`)
wells_monthly <- Wells %>%
mutate(
Month = substr(prod_date, 1, 7),
inv_dist_well = ifelse(1 / distToLovi < 0.01, 0, 1 / distToLovi)
) %>%
summarize(
.by = Month,
distToLovi_wells = mean(distToLovi, na.rm = TRUE),
inv_dist_wells = mean(inv_dist_well, na.rm = TRUE),
weighted_count_wells = sum(inv_dist_well, na.rm = TRUE) * 100,
weighted_monthly_oil = sum(monthly_oil * inv_dist_well, na.rm = TRUE),
weighted_monthly_gas = sum(monthly_gas * inv_dist_well, na.rm = TRUE),
monthly_oil = sum(monthly_oil, na.rm = TRUE),
monthly_gas = sum(monthly_gas, na.rm = TRUE)
)
Wells
wells_monthly <- Wells %>%
ungroup() %>%
mutate(
Month = substr(prod_date, 1, 7),
inv_dist_well = ifelse(1 / distToLovi < 0.01, 0, 1 / distToLovi)
) %>%
summarize(
.by = Month,
distToLovi_wells = mean(distToLovi, na.rm = TRUE),
inv_dist_wells = mean(inv_dist_well, na.rm = TRUE),
weighted_count_wells = sum(inv_dist_well, na.rm = TRUE) * 100,
weighted_monthly_oil = sum(monthly_oil * inv_dist_well, na.rm = TRUE),
weighted_monthly_gas = sum(monthly_gas * inv_dist_well, na.rm = TRUE),
monthly_oil = sum(monthly_oil, na.rm = TRUE),
monthly_gas = sum(monthly_gas, na.rm = TRUE)
)
View(wells_monthly)
wells_monthly <- Wells %>% group_by(substr(prod_date, 1, 7)) %>%
mutate(inv_dist_well = ifelse(1 / distToLovi < 0.01, 0, 1 / distToLovi)) %>%
summarize(distToLovi_wells = mean(distToLovi),
inv_dist_wells = mean(inv_dist_well),
weighted_count_wells = sum(inv_dist_wells) * 100,
weighted_monthly_oil = sum(monthly_oil * inv_dist_well),
weighted_monthly_gas = sum(monthly_gas * inv_dist_well),
monthly_oil = sum(monthly_oil),
monthly_gas = sum(monthly_gas)) %>%
rename(Month = `substr(prod_date, 1, 7)`)
wells_monthly <- Wells %>% group_by(substr(prod_date, 1, 7)) %>%
mutate(inv_dist_well = ifelse(1 / distToLovi < 0.01, 0, 1 / distToLovi)) %>%
summarize(distToLovi_wells = mean(distToLovi),
inv_dist_wells = mean(inv_dist_well),
weighted_count_wells = sum(inv_dist_wells) * 100,
weighted_monthly_oil = sum(monthly_oil * inv_dist_well),
weighted_monthly_gas = sum(monthly_gas * inv_dist_well),
monthly_oil = sum(monthly_oil),
monthly_gas = sum(monthly_gas)) %>%
rename(Month = `substr(prod_date, 1, 7)`)
?summarize
help(package = 'dplyr')
library(tidyverse)
library(sf)
library(stars)
library(ggspatial)
library(KernSmooth)
library(rgdal)
library(tidyverse)
library(sf)
library(stars)
library(ggspatial)
library(KernSmooth)
library(mgcv)
library(raster)
library(caret)
library(xgboost)
library(leaflet)
library(htmlwidgets)
library(fontawesome)
library(units)
library(lwgeom)
library(magick)
library(exactextractr)
select <- dplyr::select
zipcode_result <- readRDS('zipcode_grid_result.rds')
# Get wanted zipcodes
ca_zip <- read_sf('../../shapefiles/CA_Zipcode.shp')
ca_zip_point <- read_sf('../../shapefiles/CA_Zipcode_points.shp')
patient_zip <- read_csv('lacounty_EDpatients_ZIPcodes.csv')
patient_zip <- patient_zip[ ,2:3] %>% distinct()
patient_zipcode_boundaries <- ca_zip[ca_zip$ZIP_CODE %in% patient_zip$zipcode, ]
patient_zipcode_points <- ca_zip_point[ca_zip_point$ZIP_CODE %in% patient_zip$zipcode, ]
patient_zipcode_points_cropped <- patient_zipcode_points %>%
st_crop(xmin = -118.46, xmax = -118.14, ymin = 33.7, ymax = 33.99)
patient_zipcode_boundaries_cropped <- patient_zipcode_boundaries %>%
filter(ZIP_CODE %in% patient_zipcode_points_cropped$ZIP_CODE)
patient_zipcode_sf <- patient_zipcode_boundaries_cropped %>%
st_set_crs(CRS_LL) %>%
st_transform(CRS_UTM)
CRS_UTM <- CRS("+proj=utm +zone=11 ellps=WGS84")
CRS_LL <- CRS("+proj=longlat +datum=WGS84")
patient_zipcode_sf <- patient_zipcode_boundaries_cropped %>%
st_set_crs(CRS_LL) %>%
st_transform(CRS_UTM)
grid <- zipcode_result %>%
select(mon_utm_x, mon_utm_y, zipcode) %>%
distinct()
zipcode_grid_raster <- rasterFromXYZ(grid %>% select(mon_utm_x, mon_utm_y, 0), res = c(500, 500), crs = CRS_UTM)
grid_to_zipcode <- exact_extract(zipcode_grid_raster, patient_zipcode_sf, include_cell = T, include_xy = T)
grid_to_zipcode <- tibble(zipcode = patient_zipcode_sf$ZIP_CODE,
grid_to_zipcode) %>%
unnest()
zipcode_raster_df <- zipcode_grid_raster %>%
as.data.frame(xy = T) %>%
rowid_to_column()
grid_to_zipcode <- grid_to_zipcode %>%
inner_join(zipcode_raster_df, join_by(cell == rowid))
zipcode_weights <- grid_to_zipcode %>%
group_by(zipcode) %>%
summarise(total_weight = sum(coverage_fraction))
grid_to_zipcode <- grid_to_zipcode %>%
select(zipcode, x.x, y.x, coverage_fraction) %>%
mutate(x = as.integer(x.x),
y = as.integer(y.x)) %>%
left_join(zipcode_result %>% mutate(x = as.integer(mon_utm_x),
y = as.integer(mon_utm_y)), join_by(x == x, y == y)) %>%
left_join(zipcode_weights, join_by(zipcode.x == zipcode))
colnames(grid_to_zipcode)
zipcode_daily_average <- grid_to_zipcode %>%
group_by(zipcode.x, day, total_weight) %>%
summarise(daily_average_h2s_log = sum(da_h2s_log_prediction * coverage_fraction),
daily_average_h2s = sum(da_h2s_prediction * coverage_fraction),
daily_max_h2s_log = sum(dm_h2s_log_prediction * coverage_fraction),
daily_max_h2s = sum(dm_h2s_prediction * coverage_fraction)) %>%
mutate(daily_average_h2s_log = daily_average_h2s_log / total_weight,
daily_average_h2s = daily_average_h2s / total_weight,
daily_max_h2s_log = daily_max_h2s_log / total_weight,
daily_max_h2s = daily_max_h2s / total_weight)
zipcode_daily_predictions <- grid_to_zipcode %>%
group_by(zipcode.x, day, total_weight) %>%
summarise(daily_average_h2s_log = sum(da_h2s_log_prediction * coverage_fraction),
daily_average_h2s = sum(da_h2s_prediction * coverage_fraction),
daily_max_h2s_log = sum(dm_h2s_log_prediction * coverage_fraction),
daily_max_h2s = sum(dm_h2s_prediction * coverage_fraction)) %>%
mutate(daily_average_h2s_log = daily_average_h2s_log / total_weight,
daily_average_h2s = daily_average_h2s / total_weight,
daily_max_h2s_log = daily_max_h2s_log / total_weight,
daily_max_h2s = daily_max_h2s / total_weight)
zipcode_daily_predictions <- zipcode_daily_predictions %>%
ungroup() %>%
select(zipcode.x, day, daily_average_h2s_log, daily_average_h2s,
daily_max_h2s_log, daily_max_h2s) %>%
rename(zip_code = zipcode.x)
saveRDS(zipcode_daily_predictions, 'zipcode_daily_predictions.rds')
write_csv(zipcode_daily_predictions, 'zipcode_daily_predictions.csv')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(zoo)
library(htmlwidgets)
library(openair)
library(leaflet)
hourly_data <- readRDS("../DataProcessing/Trailer_hourly_merge_20240905.rds")
hourly_ozone <- hourly_data %>%
arrange(time_utc) %>%
mutate(o3_8h = rollmean(.$o3,
k = 8,
fill = NA,
align = "center")) %>%
select(day, time_utc, o3, o3_8h) %>%
filter(!is.na(o3_8h))
hourly_ozone %>%
ggplot(aes(x = time_utc, group = 1)) +
geom_line(aes(y = o3_8h), linewidth=0.4, color = 'skyblue') +
geom_hline(yintercept = 70, color = 'orange', linetype='dashed') +
scale_x_discrete(breaks = hourly_ozone$time_utc[c(1, 4960, length(hourly_ozone$time_utc))], labels = hourly_ozone$day[c(1, 4960, length(hourly_ozone$day))]) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = '8-hour rolling mean of Ozone', x = 'Time', y = 'Ozone')
sum(hourly_ozone$o3_8h > 70.1)
ethane <- hourly_data %>%
select(all_of(c('time_utc', 'ethane', 'wdr_deg', 'wsp_ms'))) %>%
mutate(datetime_mountain = with_tz(as.POSIXct(time_utc, tz = 'UTC',
format = "%Y-%m-%d %H:%M:%OS"),
tzone = "America/Denver")) %>%
filter(date(datetime_mountain) >= '2023-05-01') %>%
na.omit()
polarPlot?
?
?polarPlot
polarPlot(ethane, pollutant = 'ethane', x= 'wsp_ms', wd = 'wdr_deg',
key.header = "Mean Ethane (ppb)",
min.bin = 2,
key.footer = NULL)
# beyond 90th percentile
ethane_90 <- ethane %>% filter(ethane > quantile(ethane, probs = 0.9))
polarPlot(ethane_90, pollutant = 'ethane', x= 'wsp_ms', wd = 'wdr_deg',
min.bin = 2,
key.header = "Mean Ethane (ppb)", key.footer = NULL)
polarPlot(ethane, pollutant = 'ethane', x= 'wsp_ms', wd = 'wdr_deg',
min.bin = 2,
key.header = "Mean Ethane (ppb)",
key.footer = 'Ethane')
# beyond 90th percentile
ethane_90 <- ethane %>% filter(ethane > quantile(ethane, probs = 0.9))
polarPlot(ethane_90, pollutant = 'ethane', x= 'wsp_ms', wd = 'wdr_deg',
min.bin = 2,
key.header = "Mean Ethane (ppb)", key.footer = 'Ethane')
polarPlot(ethane, pollutant = 'ethane', x= 'wsp_ms', wd = 'wdr_deg',
min.bin = 2,
key.header = "Mean",
key.footer = 'Ethane')
# beyond 90th percentile
ethane_90 <- ethane %>% filter(ethane > quantile(ethane, probs = 0.9))
polarPlot(ethane_90, pollutant = 'ethane', x= 'wsp_ms', wd = 'wdr_deg',
min.bin = 2,
key.header = "Mean", key.footer = 'Ethane')
# beyond 90th percentile
ethane_90 <- ethane %>% filter(ethane > quantile(ethane, probs = 0.9))
polarPlot(ethane_90, pollutant = 'ethane', x= 'wsp_ms', wd = 'wdr_deg',
min.bin = 2)
# beyond 90th percentile
ethane_90 <- ethane %>% filter(ethane > quantile(ethane, probs = 0.9))
polarPlot(ethane_90, pollutant = 'ethane', x= 'wsp_ms', wd = 'wdr_deg',
min.bin = 2,
key.header = "Mean", key.footer = 'Ethane')
polarPlot(ethane %>%
rename(ws = 'wsp_ms',
wd = 'wdr_deg'),
pollutant = 'ethane',
x= 'ws',
wd = 'wd',
min.bin = 2,
key.header = "Mean",
key.footer = 'Ethane')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(zoo)
library(htmlwidgets)
library(openair)
library(leaflet)
hourly_data <- readRDS("../DataProcessing/Trailer_hourly_merge_20240905.rds")
hourly_ozone <- hourly_data %>%
arrange(time_utc) %>%
mutate(o3_8h = rollmean(.$o3,
k = 8,
fill = NA,
align = "center")) %>%
select(day, time_utc, o3, o3_8h) %>%
filter(!is.na(o3_8h))
hourly_ozone %>%
ggplot(aes(x = time_utc, group = 1)) +
geom_line(aes(y = o3_8h), linewidth=0.4, color = 'skyblue') +
geom_hline(yintercept = 70, color = 'orange', linetype='dashed') +
scale_x_discrete(breaks = hourly_ozone$time_utc[c(1, 4960, length(hourly_ozone$time_utc))], labels = hourly_ozone$day[c(1, 4960, length(hourly_ozone$day))]) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = '8-hour rolling mean of Ozone', x = 'Time', y = 'Ozone')
sum(hourly_ozone$o3_8h > 70.1)
radio <- c('rd_particle_B', 'radon_B', 'radon_pCi', 'rd_particle_pCi')
h2s_so2 <- c('h2s', 'so2')
for (i in 1:length(radio)){
for (j in 1:length(h2s_so2)) {
cor <- cor(hourly_data %>% pull(radio[i]), hourly_data %>% pull(h2s_so2[j]), use = 'complete.obs')
print(str_glue("Correlation between {radio[i]} and {h2s_so2[j]}: {round(cor, 4)}"))
}
}
wells_djb <- read_csv('../data/DJB well Well Headers.CSV')
cleaned_wells_djb <- wells_djb %>%
dplyr::select(api = API14, drill_type = `Drill Type`, spud_date = `Spud Date`,
completion_date = `Completion Date`,
first_prod_date = `First Prod Date`,
last_prod_date = `Last Prod Date`,
well_status = `Well Status`,
production_type = `Production Type`,
uog_lon = `Surface Hole Longitude (WGS84)`,
uog_lat = `Surface Hole Latitude (WGS84)`,
Operator.Company.Name = `Operator Company Name`)
site_coords <- tibble(name = c('LUR', 'LLG', 'BRZ', 'ECC', 'BNP'),
lat = c(40.1762235, 40.1607039, 40.0699783, 40.0402277, 39.9814076),
lon = c(-105.0476608, -105.1461437, -105.2202754, -105.0520854, -105.0064873))
# Wells map
map <- leaflet() %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery") %>%
addProviderTiles("CartoDB.PositronOnlyLabels") %>%
addCircleMarkers(data = cleaned_wells_djb, lng=~uog_lon, lat=~uog_lat,
fillOpacity = 0.9, radius = 2, weight = 1, color="cyan") %>%
addCircleMarkers(data = site_coords, lng=~lon, lat=~lat, radius=10,color="yellow",
fillColor = "yellow", fillOpacity = 1,
label = ~name,
labelOptions =
labelOptions(noHide = TRUE, direction = 'bottom', offset = c(0, 8),
style = list(
"color" = "black",
"font-family" = "serif",
"font-size" = "14px"
)))%>%
addScaleBar("bottomright")
map
# beyond 90th percentile
ethane_90 <- ethane %>% filter(ethane > quantile(ethane, probs = 0.9))
polarPlot(ethane_90 %>%
rename(ws = 'wsp_ms',
wd = 'wdr_deg'),
pollutant = 'ethane',
x= 'ws',
wd = 'wd',
min.bin = 2,
key.header = "Mean",
key.footer = 'Ethane')
