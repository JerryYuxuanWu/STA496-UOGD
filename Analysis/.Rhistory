theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
# Print the plot
print(p)
print(h)
hourly_ozone <- hourly_data %>%
arrange(datetime_mountain)%>%
mutate(o3_8h = rollmean(.$o3,
k = 8,
fill = NA,
align = "center")) %>%
select(day, datetime_mountain, o3, o3_8h) %>%
filter(!is.na(o3_8h))
hourly_ozone %>%
ggplot(aes(x = datetime_mountain, group = 1)) +
geom_line(aes(y = o3_8h), linewidth=0.4, color = 'dodgerblue') +
geom_hline(yintercept = 70, color = 'orange', linetype='dashed') +
# scale_x_discrete(breaks = hourly_ozone$time_utc[c(1, 4960, length(hourly_ozone$time_utc))], labels = hourly_ozone$day[c(1, 4960, length(hourly_ozone$day))]) +
scale_y_continuous(limits=c(0,110),breaks = seq(0, 110, by = 20)) +
labs(x = "", y = "Ozone 8-hr, ppb") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
print(h)
hourly_ozone <- hourly_data %>%
arrange(datetime_mountain)%>%
mutate(o3_8h = rollmean(.$o3,
k = 8,
fill = NA,
align = "center")) %>%
select(day, datetime_mountain, o3, o3_8h) %>%
filter(!is.na(o3_8h))
h<-hourly_ozone %>%
ggplot(aes(x = datetime_mountain, group = 1)) +
geom_line(aes(y = o3_8h), linewidth=0.4, color = 'dodgerblue') +
geom_hline(yintercept = 70, color = 'orange', linetype='dashed') +
# scale_x_discrete(breaks = hourly_ozone$time_utc[c(1, 4960, length(hourly_ozone$time_utc))], labels = hourly_ozone$day[c(1, 4960, length(hourly_ozone$day))]) +
scale_y_continuous(limits=c(0,110),breaks = seq(0, 110, by = 20)) +
labs(x = "", y = "Ozone 8-hr, ppb") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
print(h)
?as.POSIXct
# Create time series plot with GAM smooth line and horizontal line
p <- ggplot(methane, aes(x = datetime_mountain, y = ch4/1000)) +
geom_line(alpha = 0.6, color = "black") +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs", k=25), color = "orange", se = FALSE) +
geom_hline(yintercept = 1.9, linetype = "dashed", color = "blue") +
scale_y_log10() +
labs(x = "", y = "Methane, ppm") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
# Print the plot
print(p)
# Create time series plot with GAM smooth line and horizontal line
p <- ggplot(merged, aes(x = datetime_mountain, y = ch4/1000)) +
geom_line(alpha = 0.6, color = "black") +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs", k=25), color = "orange", se = FALSE) +
geom_hline(yintercept = 1.9, linetype = "dashed", color = "blue") +
scale_y_log10() +
labs(x = "", y = "Methane, ppm") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
# Print the plot
print(p)
# Create time series plot with GAM smooth line and horizontal line
p <- ggplot(merged, aes(x = datetime_mountain, y = ch4/1000)) +
geom_line(alpha = 0.6, color = "black") +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs", k=200), color = "orange", se = FALSE) +
geom_hline(yintercept = 1.9, linetype = "dashed", color = "blue") +
scale_y_log10() +
labs(x = "", y = "Methane, ppm") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
# Print the plot
print(p)
# Extract hour of day
merged <- merged %>%
mutate(hour = format(datetime_mountain, "%H"))
View(merged)
summary(merged$ch4)
# Create boxplot of concentrations by hour of day
b <- ggplot(merged, aes(x = as.factor(hour), y = ch4/1000)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = "", x = "Hour", y = "Mentahe, ppm") +
theme_minimal()
# Print the plot
print(b)
# Create boxplot of concentrations by hour of day
b <- ggplot(merged, aes(x = as.factor(hour), y = ch4/1000)) +
scale_y_continuous(limits=c(0,20),breaks = seq(0, 20, by = 5)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = "", x = "Hour", y = "Mentahe, ppm") +
theme_minimal()
# Print the plot
print(b)
# Create boxplot of concentrations by hour of day
b <- ggplot(merged, aes(x = as.factor(hour), y = ch4/1000)) +
scale_y_continuous(limits=c(0,12),breaks = seq(0, 12, by = 2)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = "", x = "Hour", y = "Mentahe, ppm") +
theme_minimal()
# Print the plot
print(b)
# Create boxplot of concentrations by hour of day
b <- ggplot(merged, aes(x = as.factor(hour), y = ch4/1000)) +
scale_y_continuous(limits=c(2,12),breaks = seq(2, 12, by = 2)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = "", x = "Hour", y = "Mentahe, ppm") +
theme_minimal()
# Create boxplot of concentrations by hour of day
ggplot(merged, aes(x = as.factor(hour), y = ch4/1000)) +
scale_y_continuous(limits=c(2,12),breaks = seq(2, 12, by = 2)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = "", x = "Hour", y = "Mentahe, ppm") +
theme_minimal()
# Create boxplot of concentrations by hour of day
ggplot(merged, aes(x = as.factor(hour), y = ch4/1000)) +
#scale_y_continuous(limits=c(2,12),breaks = seq(2, 12, by = 2)) +
scale_y_log10() +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = "", x = "Hour", y = "Mentahe, ppm") +
theme_minimal()
# Create boxplot of concentrations by hour of day
ggplot(merged, aes(x = as.factor(hour), y = ch4/1000)) +
#scale_y_continuous(limits=c(2,12),breaks = seq(2, 12, by = 2)) +
#scale_y_log10() +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = "", x = "Hour", y = "Mentahe, ppm") +
theme_minimal()
# Create boxplot of concentrations by hour of day
ggplot(merged, aes(x = as.factor(hour), y = ch4/1000)) +
#scale_y_continuous(limits=c(2,12),breaks = seq(2, 12, by = 2)) +
scale_y_log10() +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = "", x = "Hour", y = "Mentahe, ppm") +
theme_minimal()
# Create boxplot of concentrations by hour of day
ggplot(merged, aes(x = as.factor(hour), y = ch4/1000)) +
#scale_y_continuous(limits=c(2,12),breaks = seq(2, 12, by = 2)) +
scale_y_log10() +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = "", x = "Hour of Day", y = "Mentahe, ppm") +
theme_minimal()
# Create time series plot with GAM smooth line and horizontal line
ggplot(merged, aes(x = datetime_mountain, y = ch4/1000)) +
geom_line(alpha = 0.6, color = "black") +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs", k=100), color = "orange", se = FALSE) +
geom_hline(yintercept = 1.9, linetype = "dashed", color = "blue") +
scale_y_log10() +
labs(x = "", y = "Methane, ppm") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
names(co)
# Create time series plot with GAM smooth line and horizontal line
ggplot(merged, aes(x = datetime_mountain, y = ch4/1000)) +
geom_line(alpha = 0.6, color = "black") +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cr", k=40), color = "orange", se = FALSE) +
geom_hline(yintercept = 1.9, linetype = "dashed", color = "blue") +
scale_y_log10() +
labs(x = "", y = "Methane, ppm") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
ggplot(data_long, aes(x = time_utc, y = Value, color = Series)) +
geom_line(alpha = 0.6) +
labs(x = "Time", y = "Sound Level, dB") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%b %d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 6))
ggplot(data_long, aes(x = time_utc, y = Value, color = Series)) +
geom_line(alpha = 0.6) +
labs(x = "Time", y = "Sound Level, dB") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%b %d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 6))
ggplot(data_long, aes(x = time_utc, y = Value, color = Series)) +
geom_line(alpha = 0.6) +
labs(x = "Time", y = "Sound Level, dB", color = "Weighted Noise") +  # Add legend title
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%b %d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# Create time series plot with GAM smooth line and horizontal line
ggplot(merged, aes(x = datetime_mountain, y = ch4/1000)) +
geom_line(alpha = 0.6, color = "black", size=0.3) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cr", k=40), color = "orange", se = FALSE) +
geom_hline(yintercept = 1.9, linetype = "dashed", color = "blue") +
scale_y_log10() +
labs(x = "", y = "Methane, ppm") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
# Create time series plot with GAM smooth line and horizontal line
ggplot(merged, aes(x = datetime_mountain, y = ch4/1000)) +
geom_line(alpha = 0.6, color = "black", size=0.3) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cr", k=30), color = "orange", se = FALSE) +
geom_hline(yintercept = 1.9, linetype = "dashed", color = "blue", size=1) +
scale_y_log10() +
labs(x = "", y = "Methane, ppm") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
# Create time series plot with GAM smooth line and horizontal line
ggplot(merged, aes(x = datetime_mountain, y = ch4/1000)) +
geom_line(alpha = 0.6, color = "black", size=0.3) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cr", k=30), color = "orange", se = FALSE) +
geom_hline(yintercept = 1.9, linetype = "dashed", color = "blue", size=0.6) +
scale_y_log10() +
labs(x = "", y = "Methane, ppm") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
# Create time series plot with GAM smooth line and horizontal line
ggplot(merged, aes(x = datetime_mountain, y = ch4/1000)) +
geom_line(alpha = 0.6, color = "black", size=0.1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cr", k=30), color = "orange", se = FALSE) +
geom_hline(yintercept = 1.9, linetype = "dashed", color = "blue") +
scale_y_log10() +
labs(x = "", y = "Methane, ppm") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
ggplot(merged, aes(x = as.factor(hour), y = ch4/1000)) +
scale_y_log10() +
geom_boxplot(fill = "lightblue", color = "black") +
geom_jitter(shape = 1, color = "black", alpha = 0.5, width = 0.2) +  # Open circles added
labs(title = "", x = "Hour of Day", y = "Methane, ppm") +
theme_minimal()
ggplot(merged, aes(x = as.factor(hour), y = ch4/1000)) +
scale_y_log10() +
geom_boxplot(fill = "lightblue", color = "black", outlier.shape = 1) +  # Open circles for outliers
labs(title = "", x = "Hour of Day", y = "Methane, ppm") +
theme_minimal()
ggplot(merged, aes(x = as.factor(hour), y = co)) +
scale_y_log10() +
geom_boxplot(fill = "lightblue", color = "black", outlier.shape = 1) +  # Open circles for outliers
labs(title = "", x = "Hour of Day", y = "CO, ppb") +
theme_minimal()
methane<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_ch4_finalized_1min.csv", skip=1)
colnames(methane)<-c("time_utc", "ch4","co2")
methane$datetime_utc <- as.POSIXct(methane$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
o3<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_o3_finalized_1min.csv", skip=1)
colnames(o3)<-c("time_utc", "o3")
o3$datetime_utc <- as.POSIXct(o3$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
co<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_co_finalized_10min.csv")
colnames(co)<-c("time_utc", "nox", "no", "no2")
co$datetime_utc <- as.POSIXct(co$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
nox<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_nox_finalized_1min.csv", skip=1)
colnames(nox)<-c("time_utc", "nox", "no", "no2")
nox$datetime_utc <- as.POSIXct(nox$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
met<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_met_finalized_1min_w_wvmx.csv", skip=1)
colnames(met)<-c("time_utc" ,  "wdr_deg",  "wsp_ms", "temp_f"  , "relh_percent" , "solr",    "pressure_altcorr", "rain" , "water_vapor_mr" )
met$datetime_utc <- as.POSIXct(met$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
# merge
dfs <- list(methane, o3, nox, co, met)
merged <- Reduce(function(x, y) full_join(x, y, by = "datetime_utc"), dfs)
merged$datetime_mountain <- with_tz(merged$datetime_utc, tzone = "America/Denver")
merged<-merged[merged$datetime_mountain>="2023-05-01 00:00:00 MDT",]
ggplot(merged, aes(x = as.factor(hour), y = co)) +
scale_y_log10() +
geom_boxplot(fill = "lightblue", color = "black", outlier.shape = 1) +  # Open circles for outliers
labs(title = "", x = "Hour of Day", y = "CO, ppb") +
theme_minimal()
# Extract hour of day
merged <- merged %>%
mutate(hour = format(datetime_mountain, "%H"))
ggplot(merged, aes(x = as.factor(hour), y = co)) +
scale_y_log10() +
geom_boxplot(fill = "lightblue", color = "black", outlier.shape = 1) +  # Open circles for outliers
labs(title = "", x = "Hour of Day", y = "CO, ppb") +
theme_minimal()
ggplot(merged, aes(x = as.factor(hour), y = co)) +
geom_boxplot(fill = "lightblue", color = "black", outlier.shape = 1) +  # Open circles for outliers
labs(title = "", x = "Hour of Day", y = "CO, ppb") +
theme_minimal()
# Create time series plot with GAM smooth line and horizontal line at 70 ppb
ggplot(merged, aes(x = datetime_mountain, y = co)) +
geom_line(alpha = 0.6, color = "black") +
#geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "orange", se = FALSE) +
scale_y_continuous(breaks = seq(0, max(merged$co, na.rm = TRUE), by = 100)) +
labs(x = "", y = "CO, ppb") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
summary(merged$co)
co<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_co_finalized_10min.csv")
names(co)
methane<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_ch4_finalized_1min.csv", skip=1)
colnames(methane)<-c("time_utc", "ch4","co2")
methane$datetime_utc <- as.POSIXct(methane$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
o3<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_o3_finalized_1min.csv", skip=1)
colnames(o3)<-c("time_utc", "o3")
o3$datetime_utc <- as.POSIXct(o3$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
co<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_co_finalized_10min.csv",skip=1)
colnames(co)<-c("time_utc", "co",)
co$datetime_utc <- as.POSIXct(co$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
co<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_co_finalized_10min.csv",skip=1)
colnames(co)<-c("time_utc", "co")
co$datetime_utc <- as.POSIXct(co$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
nox<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_nox_finalized_1min.csv", skip=1)
colnames(nox)<-c("time_utc", "nox", "no", "no2")
nox$datetime_utc <- as.POSIXct(nox$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
met<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_met_finalized_1min_w_wvmx.csv", skip=1)
colnames(met)<-c("time_utc" ,  "wdr_deg",  "wsp_ms", "temp_f"  , "relh_percent" , "solr",    "pressure_altcorr", "rain" , "water_vapor_mr" )
met$datetime_utc <- as.POSIXct(met$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
# merge
dfs <- list(methane, o3, nox, co, met)
merged <- Reduce(function(x, y) full_join(x, y, by = "datetime_utc"), dfs)
merged$datetime_mountain <- with_tz(merged$datetime_utc, tzone = "America/Denver")
merged<-merged[merged$datetime_mountain>="2023-05-01 00:00:00 MDT",]
View(merged)
methane<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_ch4_finalized_1min.csv", skip=1)
colnames(methane)<-c("time_utc", "ch4","co2")
methane$datetime_utc <- as.POSIXct(methane$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
o3<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_o3_finalized_1min.csv", skip=1)
colnames(o3)<-c("time_utc", "o3")
o3$datetime_utc <- as.POSIXct(o3$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
co<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_co_finalized_1min.csv",skip=1)
colnames(co)<-c("time_utc", "co")
co$datetime_utc <- as.POSIXct(co$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
nox<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_nox_finalized_1min.csv", skip=1)
colnames(nox)<-c("time_utc", "nox", "no", "no2")
nox$datetime_utc <- as.POSIXct(nox$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
met<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_met_finalized_1min_w_wvmx.csv", skip=1)
colnames(met)<-c("time_utc" ,  "wdr_deg",  "wsp_ms", "temp_f"  , "relh_percent" , "solr",    "pressure_altcorr", "rain" , "water_vapor_mr" )
met$datetime_utc <- as.POSIXct(met$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
# merge
dfs <- list(methane, o3, nox, co, met)
merged <- Reduce(function(x, y) full_join(x, y, by = "datetime_utc"), dfs)
methane<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_ch4_finalized_1min.csv", skip=1)
colnames(methane)<-c("time_utc", "ch4","co2")
methane$datetime_utc <- as.POSIXct(methane$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
View(methane)
o3<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_o3_finalized_1min.csv", skip=1)
colnames(o3)<-c("time_utc", "o3")
o3$datetime_utc <- as.POSIXct(o3$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
View(o3)
co<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_co_finalized_1min.csv",skip=1)
colnames(co)<-c("time_utc", "co")
co$datetime_utc <- as.POSIXct(co$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
View(co)
nox<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_nox_finalized_1min.csv", skip=1)
colnames(nox)<-c("time_utc", "nox", "no", "no2")
nox$datetime_utc <- as.POSIXct(nox$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
View(nox)
met<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_met_finalized_1min_w_wvmx.csv", skip=1)
colnames(met)<-c("time_utc" ,  "wdr_deg",  "wsp_ms", "temp_f"  , "relh_percent" , "solr",    "pressure_altcorr", "rain" , "water_vapor_mr" )
met$datetime_utc <- as.POSIXct(met$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
# merge
dfs <- list(methane,co, o3, nox, met)
merged <- Reduce(function(x, y) full_join(x, y, by = "datetime_utc"), dfs)
View(merged)
merged$datetime_mountain <- with_tz(merged$datetime_utc, tzone = "America/Denver")
merged<-merged[merged$datetime_mountain>="2023-05-01 00:00:00 MDT",]
# Create time series plot with GAM smooth line and horizontal line
ggplot(merged, aes(x = datetime_mountain, y = co)) +
geom_line(alpha = 0.6, color = "black", size=0.1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cr", k=30), color = "orange", se = FALSE) +
#geom_hline(yintercept = 1.9, linetype = "dashed", color = "blue") +
#scale_y_log10() +
labs(x = "", y = "CO, ppb") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
# Create time series plot with GAM smooth line and horizontal line
ggplot(merged, aes(x = datetime_mountain, y = co)) +
geom_line(alpha = 0.6, color = "black", size=0.1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cr", k=30), color = "orange", se = FALSE) +
#geom_hline(yintercept = 1.9, linetype = "dashed", color = "blue") +
#scale_y_log10() +
scale_y_continuous(limits=c(0,1600),breaks = seq(0, 1600, by = 100)) +
labs(x = "", y = "CO, ppb") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
# Create time series plot with GAM smooth line and horizontal line
co_10<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_co_finalized_10min.csv")
names(co_10)
# Create time series plot with GAM smooth line and horizontal line
co_10<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_co_finalized_10min.csv", skip=1)
colnames(co_10)<-c("time_utc", "co")
# Create time series plot with GAM smooth line and horizontal line
co_10<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_co_finalized_10min.csv", skip=1)
colnames(co_10)<-c("time_utc", "co")
co_10$datetime_utc <- as.POSIXct(co_10$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
co_10$datetime_mountain <- with_tz(co_10$datetime_utc, tzone = "America/Denver")
co_10<-merged[co_10$datetime_mountain>="2023-05-01 00:00:00 MDT",]
ggplot(co_10, aes(x = datetime_mountain, y = co)) +
geom_line(alpha = 0.6, color = "black", size=0.1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cr", k=30), color = "orange", se = FALSE) +
#geom_hline(yintercept = 1.9, linetype = "dashed", color = "blue") +
#scale_y_log10() +
scale_y_continuous(limits=c(0,1600),breaks = seq(0, 1600, by = 100)) +
labs(x = "", y = "CO, ppb") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
View(co_10)
View(co_10)
# Create time series plot with GAM smooth line and horizontal line
co_10<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_co_finalized_10min.csv", skip=1)
colnames(co_10)<-c("time_utc", "co")
co_10$datetime_utc <- as.POSIXct(co_10$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
co_10$datetime_mountain <- with_tz(co_10$datetime_utc, tzone = "America/Denver")
co_10<-co_10[co_10$datetime_mountain>="2023-05-01 00:00:00 MDT",]
ggplot(co_10, aes(x = datetime_mountain, y = co)) +
geom_line(alpha = 0.6, color = "black", size=0.1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cr", k=30), color = "orange", se = FALSE) +
#geom_hline(yintercept = 1.9, linetype = "dashed", color = "blue") +
#scale_y_log10() +
scale_y_continuous(limits=c(0,1600),breaks = seq(0, 1600, by = 100)) +
labs(x = "", y = "CO, ppb") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
ggplot(co_10, aes(x = datetime_mountain, y = co)) +
geom_line(alpha = 0.6, color = "black", size=0.1) +
#geom_smooth(method = "gam", formula = y ~ s(x, bs = "cr", k=30), color = "orange", se = FALSE) +
#geom_hline(yintercept = 1.9, linetype = "dashed", color = "blue") +
#scale_y_log10() +
scale_y_continuous(limits=c(0,1600),breaks = seq(0, 1600, by = 100)) +
labs(x = "", y = "CO, ppb") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
voc<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/VOC sampling window data/Boulder_AIR_LNM_voc_finalized.csv")
View(voc)
names(voc)
voc<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/VOC sampling window data/Boulder_AIR_LNM_voc_finalized.csv", skip=1)
colnames(voc)<-c(  "time_utc",       "ethane" ,        "ethene"  ,       "propane" ,       "propene" ,       "X1_3.butadiene",
"i.butane",       "n.butane" ,      "acetylene",      "cyclopentane" ,  "i.pentane",      "n.pentane" ,
"n.hexane",       "isoprene" ,      "n.heptane" ,     "benzene" ,       "n.octane" ,      "toluene",
"ethyl.benzene",  "m.p.xylene"  ,   "o.xylene")
ggplot(merged, aes(x = as.factor(hour), y = ch4/1000)) +
scale_y_log10() +
geom_boxplot(fill = "lightgrey", color = "black", outlier.shape = 1, size = 0.3) +  # Open circles for outliers
labs(title = "", x = "Hour of Day", y = "Methane, ppm") +
theme_minimal()
methane<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_ch4_finalized_1min.csv", skip=1)
colnames(methane)<-c("time_utc", "ch4","co2")
methane$datetime_utc <- as.POSIXct(methane$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
o3<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_o3_finalized_1min.csv", skip=1)
colnames(o3)<-c("time_utc", "o3")
o3$datetime_utc <- as.POSIXct(o3$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
co<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_co_finalized_1min.csv",skip=1)
colnames(co)<-c("time_utc", "co")
co$datetime_utc <- as.POSIXct(co$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
nox<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_nox_finalized_1min.csv", skip=1)
colnames(nox)<-c("time_utc", "nox", "no", "no2")
nox$datetime_utc <- as.POSIXct(nox$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
met<-read.csv("/Users/meredith/Library/CloudStorage/GoogleDrive-mereditf@usc.edu/Shared drives/HEI Energy/data/final data/LNM_Finalized_Data/Minute data, 10-min, and hourly averaged data/Boulder_AIR_LNM_met_finalized_1min_w_wvmx.csv", skip=1)
colnames(met)<-c("time_utc" ,  "wdr_deg",  "wsp_ms", "temp_f"  , "relh_percent" , "solr",    "pressure_altcorr", "rain" , "water_vapor_mr" )
met$datetime_utc <- as.POSIXct(met$time_utc, format = "%Y-%m-%d %H:%M", tz = "UTC")
# merge
dfs <- list(methane,co, o3, nox, met)
merged <- Reduce(function(x, y) full_join(x, y, by = "datetime_utc"), dfs)
merged$datetime_mountain <- with_tz(merged$datetime_utc, tzone = "America/Denver")
merged<-merged[merged$datetime_mountain>="2023-05-01 00:00:00 MDT",]
# Extract hour of day
merged <- merged %>%
mutate(hour = format(datetime_mountain, "%H"))
ggplot(merged, aes(x = as.factor(hour), y = ch4/1000)) +
scale_y_log10() +
geom_boxplot(fill = "lightgrey", color = "black", outlier.shape = 1, size = 0.3) +  # Open circles for outliers
labs(title = "", x = "Hour of Day", y = "Methane, ppm") +
theme_minimal()
ggplot(data_long, aes(x = factor(time_utc), y = Value, color = Series)) +
geom_line(alpha = 0.6) +
labs(x = "Time", y = "Sound Level, dB", color = "Weighted Noise") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 month", date_labels = "%b %d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# Create an index to avoid large gaps
data_long <- data_long %>%
arrange(time_utc) %>%
mutate(index = row_number())  # Assign a sequential index
# Plot without large gaps
ggplot(data_long, aes(x = index, y = Value, color = Series)) +
geom_line(alpha = 0.6) +
labs(x = "Time", y = "Sound Level, dB", color = "Weighted Noise") +
theme_minimal() +
scale_x_continuous(
breaks = seq(1, nrow(data_long), length.out = 10),
labels = format(data_long$time_utc, "%b %d")[seq(1, nrow(data_long), length.out = 10)]
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# Plot without large gaps
ggplot(data_long, aes(x = index, y = Value, color = Series)) +
geom_line(alpha = 0.6) +
labs(x = "Time", y = "Sound Level, dB", color = "Weighted Noise") +
theme_minimal() +
scale_x_continuous(
breaks = seq(1, nrow(data_long), length.out = 10),
labels = format(data_long$time_utc, "%b %d")[seq(1, nrow(data_long), length.out = 10)]
) +
scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# Plot without large gaps
ggplot(data_long, aes(x = index, y = Value, color = Series)) +
geom_line(alpha = 0.6) +
labs(x = "Time", y = "Sound Level, dB", color = "Weighted Noise") +
theme_minimal() +
scale_x_continuous(
breaks = seq(1, nrow(data_long), length.out = 10),
labels = format(data_long$time_utc, "%m-%Y")[seq(1, nrow(data_long), length.out = 10)]
) +
#scale_x_datetime(date_breaks = "1 month", date_labels = "%m-%Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
