xlab = expression(i), ylab = expression(theta),
main = paste0('Estimated ', expression(theta), 'using coordinate descent'))
plot(x = 1:100, y = fit$theta,
xlab = expression(i), ylab = expression(theta),
main = expression(paste0('Estimated ', theta, 'using coordinate descent')))
plot(x = 1:100, y = fit$theta,
xlab = expression(i), ylab = expression(theta),
main = expression('Estimated ', theta, 'using coordinate descent'))
plot(x = 1:100, y = fit$theta,
xlab = expression(i), ylab = expression(theta),
main = expression(Estimated , theta, using coordinate descent))
plot(x = 1:100, y = fit$theta,
xlab = expression(i), ylab = expression(theta),
main = expression(Estimated ~ theta ~ using coordinate descent))
plot(x = 1:100, y = fit$theta,
xlab = expression(i), ylab = expression(theta),
main = expression(Estimated ~ theta ~ using ~ coordinate ~ descent))
plot(x = 1:100, y = fit$theta,
xlab = expression(i), ylab = expression(theta),
main = expression(Estimated ~ theta_i ~ using ~ coordinate ~ descent))
plot(x = 1:100, y = fit$theta,
xlab = expression(i), ylab = expression(theta),
main = expression(Estimated ~ theta[i] ~ using ~ coordinate ~ descent))
cat("Iterations to convergence (tol: 0.01): ", fit$iter)
getTheta <- function(theta1, theta2, phi) {
th <- numeric(n)
th[1] <- theta1
th[2] <- theta2
th[3:n] <- sapply(3:n, function(i) {
s <- sum(sapply(3:i, function(j) (i-j+1)*phi[j]))
s + (i-1)*theta2 - (i-2)*theta1})
th
}
coord_desc <- function(y, tol=1e-2) {
n <- length(y)
# Initialize
t1 <- 0
t2 <- 0
phi <- numeric(n)   # phi[1..2] unused, phi[3..n] >= 0
obj_vec <- Inf # To check convergence
iter <- 0
repeat{
iter <- iter + 1
# Compute the summation part for z and w
zw_sum_vec <- c(0, 0, sapply(3:n, function(i) sum(sapply(3:i, function(j) (i-j+1)*phi[j]))))
# Update theta1
num <- sum(y[1], -sum(sapply(3:n, function(i) (i-2)*(y[i]-zw_sum_vec[i] - (i-1)*t2))))
den <- sum(1, sum(sapply(3:n, function(i) (i-2)^2)))
t1_new <- num / den
# Update theta_2
num <- sum(y[2], -sum(sapply(3:n, function(i) (i-1)*(y[i]-zw_sum_vec[i]-(i-2)*t1_new))))
den <- sum(1, sum(sapply(3:n, function(i) (i-1)^2)))
t2_new <- num / den
# Update phi_j
newPhi <- phi
for(j in 3:n) {
num <- 0
den <- 0
for(i in j:n) {
fixPart <- 0
for(m in 3:i) if(m != j) fixPart <- fixPart + (i-m+1)*newPhi[m]
fixPart <- fixPart + (i-1)*t2_new - (i-2)*t1_new
w <- (i-j+1)
num <- num + w*(y[i] - fixPart)
den <- den + w^2
}
cand <- num / den
newPhi[j] <- max(0, cand)
}
t1 <- t1_new
t2 <- t2_new
phi <- newPhi
th <- getTheta(t1, t2, phi)
obj_new <- sum((y - th)^2)
if(abs(obj_new - obj_vec[iter]) < tol) {
break
}
obj_vec[iter+1] <- obj_new
}
list(phi=phi, theta=th, obj=obj_vec, iter=iter)
}
y <- scan("problem3-data.txt")  # Suppose your file is in working dir
fit <- coord_desc(y)
y
length(y)
getTheta <- function(theta1, theta2, phi) {
th <- numeric(2 + length(phi))
th[1] <- theta1
th[2] <- theta2
th[3:n] <- sapply(3:n, function(i) {
s <- sum(sapply(3:i, function(j) (i-j+1)*phi[j]))
s + (i-1)*theta2 - (i-2)*theta1})
th
}
coord_desc <- function(y, tol=1e-2) {
n <- length(y)
# Initialize
t1 <- 0
t2 <- 0
phi <- numeric(n)   # phi[1..2] unused, phi[3..n] >= 0
obj_vec <- Inf # To check convergence
iter <- 0
repeat{
iter <- iter + 1
# Compute the summation part for z and w
zw_sum_vec <- c(0, 0, sapply(3:n, function(i) sum(sapply(3:i, function(j) (i-j+1)*phi[j]))))
# Update theta1
num <- sum(y[1], -sum(sapply(3:n, function(i) (i-2)*(y[i]-zw_sum_vec[i] - (i-1)*t2))))
den <- sum(1, sum(sapply(3:n, function(i) (i-2)^2)))
t1_new <- num / den
# Update theta_2
num <- sum(y[2], -sum(sapply(3:n, function(i) (i-1)*(y[i]-zw_sum_vec[i]-(i-2)*t1_new))))
den <- sum(1, sum(sapply(3:n, function(i) (i-1)^2)))
t2_new <- num / den
# Update phi_j
newPhi <- phi
for(j in 3:n) {
num <- 0
den <- 0
for(i in j:n) {
fixPart <- 0
for(m in 3:i) if(m != j) fixPart <- fixPart + (i-m+1)*newPhi[m]
fixPart <- fixPart + (i-1)*t2_new - (i-2)*t1_new
w <- (i-j+1)
num <- num + w*(y[i] - fixPart)
den <- den + w^2
}
cand <- num / den
newPhi[j] <- max(0, cand)
}
t1 <- t1_new
t2 <- t2_new
phi <- newPhi
th <- getTheta(t1, t2, phi)
obj_new <- sum((y - th)^2)
if(abs(obj_new - obj_vec[iter]) < tol) {
break
}
obj_vec[iter+1] <- obj_new
}
list(phi=phi, theta=th, obj=obj_vec, iter=iter)
}
y <- scan("problem3-data.txt")  # Suppose your file is in working dir
fit <- coord_desc(y)
getTheta <- function(theta1, theta2, phi) {
n <- 2 + length(phi)
th <- numeric(n)
th[1] <- theta1
th[2] <- theta2
th[3:n] <- sapply(3:n, function(i) {
s <- sum(sapply(3:i, function(j) (i-j+1)*phi[j]))
s + (i-1)*theta2 - (i-2)*theta1})
th
}
coord_desc <- function(y, tol=1e-2) {
n <- length(y)
# Initialize
t1 <- 0
t2 <- 0
phi <- numeric(n)   # phi[1..2] unused, phi[3..n] >= 0
obj_vec <- Inf # To check convergence
iter <- 0
repeat{
iter <- iter + 1
# Compute the summation part for z and w
zw_sum_vec <- c(0, 0, sapply(3:n, function(i) sum(sapply(3:i, function(j) (i-j+1)*phi[j]))))
# Update theta1
num <- sum(y[1], -sum(sapply(3:n, function(i) (i-2)*(y[i]-zw_sum_vec[i] - (i-1)*t2))))
den <- sum(1, sum(sapply(3:n, function(i) (i-2)^2)))
t1_new <- num / den
# Update theta_2
num <- sum(y[2], -sum(sapply(3:n, function(i) (i-1)*(y[i]-zw_sum_vec[i]-(i-2)*t1_new))))
den <- sum(1, sum(sapply(3:n, function(i) (i-1)^2)))
t2_new <- num / den
# Update phi_j
newPhi <- phi
for(j in 3:n) {
num <- 0
den <- 0
for(i in j:n) {
fixPart <- 0
for(m in 3:i) if(m != j) fixPart <- fixPart + (i-m+1)*newPhi[m]
fixPart <- fixPart + (i-1)*t2_new - (i-2)*t1_new
w <- (i-j+1)
num <- num + w*(y[i] - fixPart)
den <- den + w^2
}
cand <- num / den
newPhi[j] <- max(0, cand)
}
t1 <- t1_new
t2 <- t2_new
phi <- newPhi
th <- getTheta(t1, t2, phi)
obj_new <- sum((y - th)^2)
if(abs(obj_new - obj_vec[iter]) < tol) {
break
}
obj_vec[iter+1] <- obj_new
}
list(phi=phi, theta=th, obj=obj_vec, iter=iter)
}
y <- scan("problem3-data.txt")  # Suppose your file is in working dir
fit <- coord_desc(y)
n <- length(y)
# Initialize
t1 <- 0
t2 <- 0
phi <- numeric(n)   # phi[1..2] unused, phi[3..n] >= 0
obj_vec <- Inf # To check convergence
iter <- 0
repeat{
iter <- iter + 1
# Compute the summation part for z and w
zw_sum_vec <- c(0, 0, sapply(3:n, function(i) sum(sapply(3:i, function(j) (i-j+1)*phi[j]))))
# Update theta1
num <- sum(y[1], -sum(sapply(3:n, function(i) (i-2)*(y[i]-zw_sum_vec[i] - (i-1)*t2))))
den <- sum(1, sum(sapply(3:n, function(i) (i-2)^2)))
t1_new <- num / den
# Update theta_2
num <- sum(y[2], -sum(sapply(3:n, function(i) (i-1)*(y[i]-zw_sum_vec[i]-(i-2)*t1_new))))
den <- sum(1, sum(sapply(3:n, function(i) (i-1)^2)))
t2_new <- num / den
# Update phi_j
newPhi <- phi
for(j in 3:n) {
num <- 0
den <- 0
for(i in j:n) {
fixPart <- 0
for(m in 3:i) if(m != j) fixPart <- fixPart + (i-m+1)*newPhi[m]
fixPart <- fixPart + (i-1)*t2_new - (i-2)*t1_new
w <- (i-j+1)
num <- num + w*(y[i] - fixPart)
den <- den + w^2
}
cand <- num / den
newPhi[j] <- max(0, cand)
}
t1 <- t1_new
t2 <- t2_new
phi <- newPhi
th <- getTheta(t1, t2, phi)
obj_new <- sum((y - th)^2)
if(abs(obj_new - obj_vec[iter]) < tol) {
break
}
obj_vec[iter+1] <- obj_new
}
getTheta <- function(t1, t2, phi) {
n <- 2 + length(phi)
th <- numeric(n)
th[1] <- t1
th[2] <- t2
th[3:n] <- sapply(3:n, function(i) {
s <- sum(sapply(3:i, function(j) (i-j+1)*phi[j]))
s + (i-1)*t2 - (i-2)*t1})
th
}
n <- length(y)
# Initialize
t1 <- 0
t2 <- 0
phi <- numeric(n)   # phi[1..2] unused, phi[3..n] >= 0
obj_vec <- Inf # To check convergence
iter <- 0
repeat{
iter <- iter + 1
# Compute the summation part for z and w
zw_sum_vec <- c(0, 0, sapply(3:n, function(i) sum(sapply(3:i, function(j) (i-j+1)*phi[j]))))
# Update theta1
num <- sum(y[1], -sum(sapply(3:n, function(i) (i-2)*(y[i]-zw_sum_vec[i] - (i-1)*t2))))
den <- sum(1, sum(sapply(3:n, function(i) (i-2)^2)))
t1_new <- num / den
# Update theta_2
num <- sum(y[2], -sum(sapply(3:n, function(i) (i-1)*(y[i]-zw_sum_vec[i]-(i-2)*t1_new))))
den <- sum(1, sum(sapply(3:n, function(i) (i-1)^2)))
t2_new <- num / den
# Update phi_j
newPhi <- phi
for(j in 3:n) {
num <- 0
den <- 0
for(i in j:n) {
fixPart <- 0
for(m in 3:i) if(m != j) fixPart <- fixPart + (i-m+1)*newPhi[m]
fixPart <- fixPart + (i-1)*t2_new - (i-2)*t1_new
w <- (i-j+1)
num <- num + w*(y[i] - fixPart)
den <- den + w^2
}
cand <- num / den
newPhi[j] <- max(0, cand)
}
t1 <- t1_new
t2 <- t2_new
phi <- newPhi
th <- getTheta(t1, t2, phi)
obj_new <- sum((y - th)^2)
if(abs(obj_new - obj_vec[iter]) < tol) {
break
}
obj_vec[iter+1] <- obj_new
}
tol <- 0.01
repeat{
iter <- iter + 1
# Compute the summation part for z and w
zw_sum_vec <- c(0, 0, sapply(3:n, function(i) sum(sapply(3:i, function(j) (i-j+1)*phi[j]))))
# Update theta1
num <- sum(y[1], -sum(sapply(3:n, function(i) (i-2)*(y[i]-zw_sum_vec[i] - (i-1)*t2))))
den <- sum(1, sum(sapply(3:n, function(i) (i-2)^2)))
t1_new <- num / den
# Update theta_2
num <- sum(y[2], -sum(sapply(3:n, function(i) (i-1)*(y[i]-zw_sum_vec[i]-(i-2)*t1_new))))
den <- sum(1, sum(sapply(3:n, function(i) (i-1)^2)))
t2_new <- num / den
# Update phi_j
newPhi <- phi
for(j in 3:n) {
num <- 0
den <- 0
for(i in j:n) {
fixPart <- 0
for(m in 3:i) if(m != j) fixPart <- fixPart + (i-m+1)*newPhi[m]
fixPart <- fixPart + (i-1)*t2_new - (i-2)*t1_new
w <- (i-j+1)
num <- num + w*(y[i] - fixPart)
den <- den + w^2
}
cand <- num / den
newPhi[j] <- max(0, cand)
}
t1 <- t1_new
t2 <- t2_new
phi <- newPhi
th <- getTheta(t1, t2, phi)
obj_new <- sum((y - th)^2)
if(abs(obj_new - obj_vec[iter]) < tol) {
break
}
obj_vec[iter+1] <- obj_new
}
obj_vec[iter]
obj_vec
iter
iter <- 0
repeat{
iter <- iter + 1
# Compute the summation part for z and w
zw_sum_vec <- c(0, 0, sapply(3:n, function(i) sum(sapply(3:i, function(j) (i-j+1)*phi[j]))))
# Update theta1
num <- sum(y[1], -sum(sapply(3:n, function(i) (i-2)*(y[i]-zw_sum_vec[i] - (i-1)*t2))))
den <- sum(1, sum(sapply(3:n, function(i) (i-2)^2)))
t1_new <- num / den
# Update theta_2
num <- sum(y[2], -sum(sapply(3:n, function(i) (i-1)*(y[i]-zw_sum_vec[i]-(i-2)*t1_new))))
den <- sum(1, sum(sapply(3:n, function(i) (i-1)^2)))
t2_new <- num / den
# Update phi_j
newPhi <- phi
for(j in 3:n) {
num <- 0
den <- 0
for(i in j:n) {
fixPart <- 0
for(m in 3:i) if(m != j) fixPart <- fixPart + (i-m+1)*newPhi[m]
fixPart <- fixPart + (i-1)*t2_new - (i-2)*t1_new
w <- (i-j+1)
num <- num + w*(y[i] - fixPart)
den <- den + w^2
}
cand <- num / den
newPhi[j] <- max(0, cand)
}
t1 <- t1_new
t2 <- t2_new
phi <- newPhi
th <- getTheta(t1, t2, phi)
obj_new <- sum((y - th)^2)
if(abs(obj_new - obj_vec[iter]) < tol) {
break
}
obj_vec[iter+1] <- obj_new
}
iter
obj_vec
obj_vec[iter]
obj_new
sum((y - th)^2)
thy
th
getTheta <- function(t1, t2, phi) {
n <- length(phi)
th <- numeric(n)
th[1] <- t1
th[2] <- t2
th[3:n] <- sapply(3:n, function(i) {
s <- sum(sapply(3:i, function(j) (i-j+1)*phi[j]))
s + (i-1)*t2 - (i-2)*t1})
th
}
coord_desc <- function(y, tol=1e-2) {
n <- length(y)
# Initialize
t1 <- 0
t2 <- 0
phi <- numeric(n)   # phi[1..2] unused, phi[3..n] >= 0
obj_vec <- Inf # To check convergence
iter <- 0
repeat{
iter <- iter + 1
# Compute the summation part for z and w
zw_sum_vec <- c(0, 0, sapply(3:n, function(i) sum(sapply(3:i, function(j) (i-j+1)*phi[j]))))
# Update theta1
num <- sum(y[1], -sum(sapply(3:n, function(i) (i-2)*(y[i]-zw_sum_vec[i] - (i-1)*t2))))
den <- sum(1, sum(sapply(3:n, function(i) (i-2)^2)))
t1_new <- num / den
# Update theta_2
num <- sum(y[2], -sum(sapply(3:n, function(i) (i-1)*(y[i]-zw_sum_vec[i]-(i-2)*t1_new))))
den <- sum(1, sum(sapply(3:n, function(i) (i-1)^2)))
t2_new <- num / den
# Update phi_j
newPhi <- phi
for(j in 3:n) {
num <- 0
den <- 0
for(i in j:n) {
fixPart <- 0
for(m in 3:i) if(m != j) fixPart <- fixPart + (i-m+1)*newPhi[m]
fixPart <- fixPart + (i-1)*t2_new - (i-2)*t1_new
w <- (i-j+1)
num <- num + w*(y[i] - fixPart)
den <- den + w^2
}
cand <- num / den
newPhi[j] <- max(0, cand)
}
t1 <- t1_new
t2 <- t2_new
phi <- newPhi
th <- getTheta(t1, t2, phi)
obj_new <- sum((y - th)^2)
if(abs(obj_new - obj_vec[iter]) < tol) {
break
}
obj_vec[iter+1] <- obj_new
}
list(phi=phi, theta=th, obj=obj_vec, iter=iter)
}
y <- scan("problem3-data.txt")  # Suppose your file is in working dir
fit <- coord_desc(y)
coord_desc <- function(y, tol=100) {
n <- length(y)
# Initialize
t1 <- 0
t2 <- 0
phi <- numeric(n)   # phi[1..2] unused, phi[3..n] >= 0
obj_vec <- Inf # To check convergence
iter <- 0
repeat{
iter <- iter + 1
# Compute the summation part for z and w
zw_sum_vec <- c(0, 0, sapply(3:n, function(i) sum(sapply(3:i, function(j) (i-j+1)*phi[j]))))
# Update theta1
num <- sum(y[1], -sum(sapply(3:n, function(i) (i-2)*(y[i]-zw_sum_vec[i] - (i-1)*t2))))
den <- sum(1, sum(sapply(3:n, function(i) (i-2)^2)))
t1_new <- num / den
# Update theta_2
num <- sum(y[2], -sum(sapply(3:n, function(i) (i-1)*(y[i]-zw_sum_vec[i]-(i-2)*t1_new))))
den <- sum(1, sum(sapply(3:n, function(i) (i-1)^2)))
t2_new <- num / den
# Update phi_j
newPhi <- phi
for(j in 3:n) {
num <- 0
den <- 0
for(i in j:n) {
fixPart <- 0
for(m in 3:i) if(m != j) fixPart <- fixPart + (i-m+1)*newPhi[m]
fixPart <- fixPart + (i-1)*t2_new - (i-2)*t1_new
w <- (i-j+1)
num <- num + w*(y[i] - fixPart)
den <- den + w^2
}
cand <- num / den
newPhi[j] <- max(0, cand)
}
t1 <- t1_new
t2 <- t2_new
phi <- newPhi
th <- getTheta(t1, t2, phi)
obj_new <- sum((y - th)^2)
if(abs(obj_new - obj_vec[iter]) < tol) {
break
}
obj_vec[iter+1] <- obj_new
}
list(phi=phi, theta=th, obj=obj_vec, iter=iter)
}
y <- scan("problem3-data.txt")  # Suppose your file is in working dir
fit <- coord_desc(y)
cat("Iterations to convergence (tol: 0.01): ", fit$iter, '\n')
cat("Estimated theta1 =", fit$th[1], "\n")
cat("Estimated theta2 =", fit$th[2], "\n")
plot(x = 1:100, y = fit$theta,
xlab = expression(i), ylab = expression(theta),
main = expression(Estimated ~ theta[i] ~ using ~ coordinate ~ descent))
plot(x = 1:fit$iter, y = obj_vec, xlab = 'Iteration', ylab = 'Objective Function',
main = 'Objective function trend')
plot(x = 1:fit$iter, y = fit$obj, xlab = 'Iteration', ylab = 'Objective Function',
main = 'Objective function trend')
